package PegasusUtil;
import "pegasus/shared.proto";


message ClientOption {
	required int32 index = 1;
	optional bool as_bool = 2;
	optional int32 as_int32 = 3;
	optional int64 as_int64 = 4;
	optional float as_float = 5;
	optional uint64 as_uint64 = 6;
}

message PurchaseError {
	enum Error {
		E_UNKNOWN = -1;
		E_SUCCESS = 0;
		E_STILL_IN_PROGRESS = 1;
		E_INVALID_BNET = 2;
		E_SERVICE_NA = 3;
		E_PURCHASE_IN_PROGRESS = 4;
		E_DATABASE = 5;
		E_INVALID_QUANTITY = 6;
		E_DUPLICATE_LICENSE = 7;
		E_REQUEST_NOT_SENT = 8;
		E_NO_ACTIVE_BPAY = 9;
		E_FAILED_RISK = 10;
		E_CANCELED = 11;
		E_WAIT_MOP = 12;
		E_WAIT_CLIENT_CONFIRM = 13;
		E_WAIT_CLIENT_RISK = 14;
		E_PRODUCT_NA = 15;
		E_RISK_TIMEOUT = 16;
		E_PRODUCT_ALREADY_OWNED = 17;
		E_WAIT_THIRD_PARTY_RECEIPT = 18;
		E_PRODUCT_EVENT_HAS_ENDED = 19;
		E_BP_GENERIC_FAIL = 100;
		E_BP_INVALID_CC_EXPIRY = 101;
		E_BP_RISK_ERROR = 102;
		E_BP_NO_VALID_PAYMENT = 103;
		E_BP_PAYMENT_AUTH = 104;
		E_BP_PROVIDER_DENIED = 105;
		E_BP_PURCHASE_BAN = 106;
		E_BP_SPENDING_LIMIT = 107;
		E_BP_PARENTAL_CONTROL = 108;
		E_BP_THROTTLED = 109;
		E_BP_THIRD_PARTY_BAD_RECEIPT = 110;
		E_BP_THIRD_PARTY_RECEIPT_USED = 111;
		E_BP_PRODUCT_UNIQUENESS_VIOLATED = 112;
		E_BP_REGION_IS_DOWN = 113;
	}

	required Error error = 1;
	optional string purchase_in_progress = 2;
	optional string error_code = 3;
}

message NearbyPlayer {
	required uint64 bnet_id_hi = 1;
	required uint64 bnet_id_lo = 2;
	required uint64 session_start_time = 3;
}

message SpecialEventTiming {
	required string event = 1;
	optional uint64 start = 2;
	optional uint64 end = 3;
}

message CardValue {
	required PegasusShared.CardDef card = 1;
	required int32 buy = 2;
	required int32 sell = 3;
	required bool nerfed = 4;
}

message Achieve {
	required int32 id = 1;
	required int32 progress = 2;
	required int32 ack_progress = 3;
	optional int32 completion_count = 4;
	optional bool active = 5;
	optional int32 started_count = 6;
	optional PegasusShared.Date date_given = 7;
	optional PegasusShared.Date date_completed = 8;
	optional bool do_not_ack = 9;
}

message AdventureOptions {
	required int32 adventure_id = 1;
	required uint64 options = 2;
}

message ProfileNotice {
	required int64 entry = 1;
	optional PegasusShared.ProfileNoticeMedal medal = 2;
	optional PegasusShared.ProfileNoticeRewardBooster reward_booster = 3;
	optional PegasusShared.ProfileNoticeRewardCard reward_card = 4;
	optional PegasusShared.ProfileNoticePreconDeck precon_deck = 6;
	optional PegasusShared.ProfileNoticeRewardDust reward_dust = 7;
	optional PegasusShared.ProfileNoticeRewardGold reward_gold = 8;
	optional PegasusShared.ProfileNoticeRewardMount reward_mount = 9;
	optional PegasusShared.ProfileNoticeRewardForge reward_forge = 10;
	required int32 origin = 11;
	optional int64 origin_data = 12;
	required PegasusShared.Date when = 13;
	optional PegasusShared.ProfileNoticePurchase purchase = 14;
	optional PegasusShared.ProfileNoticeCardBack reward_card_back = 15;
	optional PegasusShared.ProfileNoticeDisconnectedGameResult dc_game_result = 16;
	optional PegasusShared.ProfileNoticeBonusStars bonus_stars = 17;
	optional PegasusShared.ProfileNoticeAdventureProgress adventure_progress = 18;
	optional PegasusShared.ProfileNoticeLevelUp level_up = 19;
	optional PegasusShared.ProfileNoticeAccountLicense account_license = 20;
}

message BoosterTally {
	required bool is_open = 1;
	required int32 type_id = 2;
	required bool is_bought = 3;
	required int32 source_id = 4;
	required int32 count = 5;
}

message BoosterCard {
	required PegasusShared.CardDef card_def = 1;
	required PegasusShared.Date insert_date = 2;
}

message MedalHistoryInfo {
	required int32 season = 1;
	required PegasusShared.Date when = 2;
	required int32 stars = 3;
	required int32 star_level = 4;
	required int32 level_start = 5;
	required int32 level_end = 6;
	optional int32 legend_rank = 7;
}

message CardUseCount {
	required int32 asset = 1;
	required int32 count = 2;
}

message BundleItem {
	required ProductType product_type = 1;
	required int32 data = 2;
	required int32 quantity = 3;
}

message Bundle {
	required string id = 1;
	required double cost = 2;
	optional string apple_id = 3;
	optional string google_play_id = 4;
	repeated BundleItem items = 5;
	optional int64 gold_cost = 6;
	optional string amazon_id = 7;
	optional string product_event_name = 9;
}

message GoldCostBooster {
	required int64 cost = 1;
	required int32 pack_type = 2;
}

message PlayerRecord {
	required PegasusShared.GameType type = 1;
	optional int32 data = 2;
	required int32 wins = 3;
	required int32 losses = 4;
	optional int32 ties = 5;
}

message NextHeroLevelReward {
	required int32 level = 1;
	optional PegasusShared.ProfileNoticeRewardBooster reward_booster = 2;
	optional PegasusShared.ProfileNoticeRewardCard reward_card = 3;
	optional PegasusShared.ProfileNoticeRewardDust reward_dust = 4;
	optional PegasusShared.ProfileNoticeRewardGold reward_gold = 5;
	optional PegasusShared.ProfileNoticeRewardMount reward_mount = 6;
	optional PegasusShared.ProfileNoticeRewardForge reward_forge = 7;
}

message HeroXPInfo {
	required int32 class_id = 1;
	required int32 level = 2;
	required int64 curr_xp = 3;
	required int64 max_xp = 4;
	optional NextHeroLevelReward next_reward = 5;
}

message AssetResponse {
	required AssetRequestKey requested_key = 1;
	required PegasusShared.DatabaseResult error_code = 2;
	optional PegasusShared.ScenarioDbRecord scenario_asset = 100;
}

message DeckSetData {
	enum PacketID {
		ID = 222;
		System = 0;
	}

	required int64 deck = 1;
	repeated PegasusShared.DeckCardData cards = 2;
	optional PegasusShared.CardDef hero = 3;
	optional int32 card_back = 4;
}

message ValidateAchieve {
	enum PacketID {
		ID = 284;
		System = 0;
	}

	required int32 achieve = 1;
}

message CloseCardMarket {
	enum PacketID {
		ID = 263;
		System = 0;
	}
}

message UpdateLogin {
	enum PacketID {
		ID = 205;
		System = 0;
	}

	optional bool reply_required = 1;
	optional string referral = 2;
	optional string device_model = 3;
}

message DevBnetIdentify {
	enum PacketID {
		ID = 259;
		System = 0;
	}

	required string name = 1;
}

message UtilHandshake {
	enum PacketID {
		ID = 203;
	}

	required int32 client_handle = 1;
	required int32 password = 2;
}

message SetOptions {
	enum PacketID {
		ID = 239;
		System = 0;
	}

	repeated ClientOption options = 1;
}

message GetOptions {
	enum PacketID {
		ID = 240;
		System = 0;
	}

	repeated int32 keys = 1 [packed = true];
}

message GetAccountInfo {
	enum Request {
		LAST_LOGIN = 1;
		DECK_LIST = 2;
		COLLECTION = 3;
		MEDAL_INFO = 4;
		MEDAL_HISTORY = 5;
		BOOSTERS = 6;
		CARD_BACKS = 7;
		PLAYER_RECORD = 8;
		GAMES_PLAYED = 9;
		DECK_LIMIT = 10;
		CAMPAIGN_INFO = 11;
		NOTICES = 12;
		MOTD = 13;
		CLIENT_OPTIONS = 14;
		CARD_VALUES = 15;
		DISCONNECTED = 16;
		ARCANE_DUST_BALANCE = 17;
		FEATURES = 18;
		REWARD_PROGRESS = 19;
		GOLD_BALANCE = 20;
		HERO_XP = 21;
		PVP_QUEUE = 22;
		NOT_SO_MASSIVE_LOGIN = 23;
		BOOSTER_TALLY = 24;
		TAVERN_BRAWL_INFO = 25;
		TAVERN_BRAWL_RECORD = 26;
		FAVORITE_HEROES = 27;
		ACCOUNT_LICENSES = 28;
	}
	enum PacketID {
		ID = 201;
		System = 0;
	}

	required Request request = 1;
}

message GetDeck {
	enum PacketID {
		ID = 214;
		System = 0;
	}

	required int64 deck = 1;
}

message CreateDeck {
	enum PacketID {
		ID = 209;
		System = 0;
	}

	required string name = 1;
	required int32 hero = 2;
	required int32 hero_premium = 3;
	required PegasusShared.DeckType deck_type = 4;
}

message DeleteDeck {
	enum PacketID {
		ID = 210;
		System = 0;
	}

	required int64 deck = 1;
}

message RenameDeck {
	enum PacketID {
		ID = 211;
		System = 0;
	}

	required int64 deck = 1;
	required string name = 2;
}

message AckNotice {
	enum PacketID {
		ID = 213;
		System = 0;
	}

	required int64 entry = 1;
}

message OpenBooster {
	enum PacketID {
		ID = 225;
		System = 0;
	}

	required int32 booster_type = 2;
}

message Subscribe {
	enum PacketID {
		ID = 314;
	}
}

message OneClientTracking {
	enum Level {
		L_INFO = 1;
		L_WARNING = 2;
		L_ERROR = 3;
	}

	required Level level = 1;
	required int32 what = 2;
	required uint64 timestamp = 4;
	optional string message = 3;
}

message ClientTracking {
	enum PacketID {
		ID = 228;
		System = 0;
	}

	repeated OneClientTracking info = 4;
}

message GuardianTrack {
	enum PacketID {
		ID = 261;
		System = 0;
	}

	required int32 what = 1;
}

message SetProgress {
	enum PacketID {
		ID = 230;
		System = 0;
	}

	required int64 value = 1;
}

message AckCardSeen {
	enum PacketID {
		ID = 223;
		System = 0;
	}

	repeated PegasusShared.CardDef card_defs = 1;
}

message CardBacks {
	enum PacketID {
		ID = 236;
		System = 0;
	}

	required int32 default_card_back = 1;
	repeated int32 card_backs = 2;
}

message DraftBegin {
	enum PacketID {
		ID = 235;
		System = 0;
	}
}

message DraftRetire {
	enum PacketID {
		ID = 242;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
}

message DraftAckRewards {
	enum PacketID {
		ID = 287;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
}

message DraftGetPicksAndContents {
	enum PacketID {
		ID = 244;
		System = 0;
	}
}

message DraftMakePick {
	enum PacketID {
		ID = 245;
		System = 0;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
	required int32 index = 3;
}

message GetAchieves {
	enum PacketID {
		ID = 253;
		System = 0;
	}

	optional bool only_active_or_new_complete = 1;
}

message AckAchieveProgress {
	enum PacketID {
		ID = 243;
		System = 0;
	}

	required int32 id = 1;
	required int32 ack_progress = 2;
}

message BuySellCard {
	enum PacketID {
		ID = 257;
		System = 0;
	}

	required PegasusShared.CardDef def = 1;
	optional int32 count = 2;
	required bool buying = 3;
	optional int32 unit_sell_price = 4;
	optional int32 unit_buy_price = 5;
}

message GetPurchaseMethod {
	enum PacketID {
		ID = 250;
		System = 1;
	}

	required string product_id = 1;
	required int32 quantity = 2;
	required int32 currency = 3;
	required string device_id = 4;
}

message DoPurchase {
	enum PacketID {
		ID = 273;
		System = 1;
	}
}

message CancelPurchase {
	enum ThirdPartyCancelReason {
		PROVIDER_REPORTED_FAILURE = 1;
		NOT_RECOGNIZED_BY_PROVIDER = 2;
		USER_CANCELED_BEFORE_PAYMENT = 3;
		USER_CANCELING_TO_UNBLOCK = 4;
	}
	enum PacketID {
		ID = 274;
		System = 1;
	}

	required bool is_auto_cancel = 1;
	optional ThirdPartyCancelReason third_party_reason = 2 [default = PROVIDER_REPORTED_FAILURE];
	required string device_id = 3;
}

message CheckAccountLicenses {
	enum PacketID {
		ID = 267;
		System = 0;
	}
}

message CheckGameLicenses {
	enum PacketID {
		ID = 276;
		System = 1;
	}
}

message GetBattlePayConfig {
	enum PacketID {
		ID = 237;
		System = 1;
	}
}

message GetBattlePayStatus {
	enum PacketID {
		ID = 255;
		System = 1;
	}
}

message CancelQuest {
	enum PacketID {
		ID = 281;
		System = 0;
	}

	required int32 quest_id = 1;
}

message MassDisenchantRequest {
	enum PacketID {
		ID = 268;
		System = 0;
	}
}

message PurchaseWithGold {
	enum PacketID {
		ID = 279;
		System = 0;
	}

	required int32 quantity = 1;
	required ProductType product = 2;
	optional int32 data = 3;
}

message SetCardBack {
	enum PacketID {
		ID = 291;
		System = 0;
	}

	required int32 card_back = 1;
	optional int64 deck_id = 2;
}

message ThirdPartyReceiptData {
	optional string third_party_id = 1;
	optional string receipt = 2;
	optional string third_party_user_id = 3;
}

message SubmitThirdPartyReceipt {
	enum PacketID {
		ID = 293;
		System = 1;
	}

	required ThirdPartyReceiptData receipt_data = 1;
	required int64 transaction_id = 2;
}

message GetThirdPartyPurchaseStatus {
	enum PacketID {
		ID = 294;
		System = 1;
	}

	required string third_party_id = 1;
}

message CheckAccountLicenseAchieve {
	enum PacketID {
		ID = 297;
		System = 1;
	}

	required int32 achieve = 1;
}

message TriggerLaunchDayEvent {
	enum PacketID {
		ID = 298;
		System = 0;
	}

	required NearbyPlayer last_played = 1;
	required NearbyPlayer other_player = 2;
}

message GetAssetsVersion {
	enum PacketID {
		ID = 303;
		System = 0;
	}
}

message GetAdventureProgress {
	enum PacketID {
		ID = 305;
		System = 0;
	}
}

message SetAdventureOptions {
	enum PacketID {
		ID = 310;
		System = 0;
	}

	required AdventureOptions adventure_options = 1;
}

message StartThirdPartyPurchase {
	enum PacketID {
		ID = 312;
		System = 1;
	}

	required PegasusShared.BattlePayProvider provider = 1;
	required string product_id = 2;
	required int32 quantity = 3;
	optional ThirdPartyReceiptData dangling_receipt_data = 4;
	required string device_id = 5;
}

message SetFavoriteHero {
	enum PacketID {
		ID = 319;
		System = 0;
	}

	required PegasusShared.FavoriteHero favorite_hero = 1;
}

message AssetRequestKey {
	required PegasusShared.AssetType type = 1;
	optional int32 asset_id = 2;
}

message GetAssetRequest {
	enum PacketID {
		ID = 321;
		System = 0;
	}

	repeated AssetRequestKey requests = 1;
}

message DebugCommandRequest {
	enum PacketID {
		ID = 322;
		System = 0;
	}

	required string command = 1;
	repeated string args = 2;
}

message NotSoMassiveLoginReply {
	enum PacketID {
		ID = 300;
	}

	repeated SpecialEventTiming special_event_timing = 10;
	optional TavernBrawlInfo tavern_brawls = 11;
}

message UpdateLoginComplete {
	enum PacketID {
		ID = 307;
	}
}

message AckWingProgress {
	enum PacketID {
		ID = 308;
		System = 0;
	}

	required int32 wing = 1;
	required int32 ack = 2;
}

message AcknowledgeBanner {
	enum PacketID {
		ID = 309;
		System = 0;
	}

	required int32 banner = 1;
}

message Disconnected {
	enum PacketID {
		ID = 289;
	}

	optional string address = 1;
	optional int32 game_handle = 2;
	optional int64 client_handle = 3;
	optional int32 port = 4;
	optional string version = 5;
	optional string aurora_password = 6;
	optional int32 scenario = 7;
}

message ValidateAchieveResponse {
	enum PacketID {
		ID = 285;
	}

	required int32 achieve = 1;
}

message PlayQueue {
	enum PacketID {
		ID = 286;
	}

	required PegasusShared.PlayQueueInfo queue = 1;
}

message DroppedRequest {
	enum PacketID {
		ID = 0;
	}
}

message GuardianVars {
	enum PacketID {
		ID = 264;
	}

	optional bool tourney = 1;
	optional bool practice = 2;
	optional bool casual = 3;
	optional bool forge = 4;
	optional bool friendly = 5;
	optional bool manager = 6;
	optional bool crafting = 7;
	optional bool hunter = 8;
	optional bool mage = 9;
	optional bool paladin = 10;
	optional bool priest = 11;
	optional bool rogue = 12;
	optional bool shaman = 13;
	optional bool warlock = 14;
	optional bool warrior = 15;
	optional int32 show_user_u_i = 16;
	optional bool store = 17;
	optional bool battle_pay = 18;
	optional bool buy_with_gold = 19;
	optional bool tavern_brawl = 20;
}

message ArcaneDustBalance {
	enum PacketID {
		ID = 262;
	}

	required int64 balance = 1;
}

message GoldBalance {
	enum PacketID {
		ID = 278;
	}

	required int64 capped_balance = 1;
	required int64 bonus_balance = 2;
	required int64 cap = 3;
	required int64 cap_warning = 4;
}

message CardValues {
	enum PacketID {
		ID = 260;
	}

	repeated CardValue cards = 1;
	required int32 card_nerf_index = 2;
}

message BoughtSoldCard {
	enum Result {
		GENERIC_FAILURE = 1;
		SOLD = 2;
		BOUGHT = 3;
		SOULBOUND = 4;
		WRONG_SELL_PRICE = 5;
		WRONG_BUY_PRICE = 6;
		NO_PERMISSION = 7;
		EVENT_NOT_ACTIVE = 8;
	}
	enum PacketID {
		ID = 258;
	}

	required PegasusShared.CardDef def = 1;
	required int32 amount = 2;
	required Result result = 3;
	optional int32 count = 4;
	optional bool nerfed = 5;
	optional int32 unit_sell_price = 6;
	optional int32 unit_buy_price = 7;
}

message NOP {
	enum PacketID {
		ID = 254;
	}
}

message Achieves {
	enum PacketID {
		ID = 252;
	}

	repeated Achieve list = 1;
}

message DraftError {
	enum ErrorCode {
		DE_UNKNOWN = 0;
		DE_NO_LICENSE = 1;
		DE_RETIRE_FIRST = 2;
		DE_NOT_IN_DRAFT = 3;
		DE_BAD_DECK = 4;
		DE_BAD_SLOT = 5;
		DE_BAD_INDEX = 6;
		DE_NOT_IN_DRAFT_BUT_COULD_BE = 7;
		DE_FEATURE_DISABLED = 8;
	}
	enum PacketID {
		ID = 251;
	}

	required ErrorCode error_code = 1;
}

message DraftBeginning {
	enum PacketID {
		ID = 246;
	}

	required int64 deck_id = 1;
	repeated PegasusShared.CardDef choice_list = 3;
}

message DraftRetired {
	enum PacketID {
		ID = 247;
	}

	required int64 deck_id = 1;
	required PegasusShared.RewardChest chest = 2;
}

message DraftRewardsAcked {
	enum PacketID {
		ID = 288;
	}

	required int64 deck_id = 1;
}

message DraftChoicesAndContents {
	enum PacketID {
		ID = 248;
	}

	required int64 deck_id = 1;
	required int32 slot = 2;
	repeated PegasusShared.DeckCardData cards = 5;
	required int32 wins = 6;
	required int32 losses = 7;
	optional PegasusShared.RewardChest chest = 8;
	repeated PegasusShared.CardDef choice_list = 9;
	required PegasusShared.CardDef hero_def = 10;
	optional int32 max_wins = 11;
}

message DraftChosen {
	enum PacketID {
		ID = 249;
	}

	required PegasusShared.CardDef chosen = 3;
	repeated PegasusShared.CardDef next_choice_list = 4;
}

message UtilAuth {
	enum Result {
		UNKNOWN = 0;
		ALLOWED = 1;
		INVALID = 2;
		NO_SERVER = 3;
	}
	enum PacketID {
		ID = 204;
	}

	required Result result = 1;
}

message ClientOptions {
	enum PacketID {
		ID = 241;
	}

	repeated ClientOption options = 1;
	optional bool failed = 2;
}

message ProfileLastLogin {
	enum PacketID {
		ID = 227;
	}

	required PegasusShared.Date last_login = 1;
}

message ProfileDeckLimit {
	enum PacketID {
		ID = 231;
	}

	required int32 deck_limit = 1;
}

message ProfileProgress {
	enum PacketID {
		ID = 233;
	}

	required int64 progress = 1;
	required int32 best_forge = 2;
	optional PegasusShared.Date last_forge = 3;
	optional int32 display_banner = 4 [default = 0];
	repeated AdventureOptions adventure_options = 5;
}

message ProfileNotices {
	enum PacketID {
		ID = 212;
	}

	repeated ProfileNotice list = 1;
}

message DeckList {
	enum PacketID {
		ID = 202;
	}

	repeated PegasusShared.DeckInfo decks = 1;
}

message DebugAuth {
	enum Result {
		UNKNOWN = 0;
		VALID = 1;
		BAD_USER = 2;
		BAD_PASSWORD = 3;
	}
	enum PacketID {
		ID = 206;
	}

	required Result result = 1;
	required int64 player_id = 2;
}

message Collection {
	enum PacketID {
		ID = 207;
	}

	repeated PegasusShared.CardStack stacks = 1;
}

message DeckContents {
	enum PacketID {
		ID = 215;
	}

	required int64 deck = 1;
	repeated PegasusShared.DeckCardData cards = 2;
}

message DBAction {
	enum PacketID {
		ID = 216;
	}

	required PegasusShared.DatabaseAction action = 1;
	required PegasusShared.DatabaseResult result = 2;
	optional int64 meta_data = 3;
}

message DeckCreated {
	enum PacketID {
		ID = 217;
	}

	required PegasusShared.DeckInfo info = 1;
}

message DeckDeleted {
	enum PacketID {
		ID = 218;
	}

	required int64 deck = 1;
}

message DeckRenamed {
	enum PacketID {
		ID = 219;
	}

	required int64 deck = 1;
	required string name = 2;
}

message DeckGainedCard {
	enum PacketID {
		ID = 220;
	}

	required int64 deck = 1;
	required int64 card = 2;
}

message DeckLostCard {
	enum PacketID {
		ID = 221;
	}

	required int64 deck = 1;
	required int64 card = 2;
}

message BoosterList {
	enum PacketID {
		ID = 224;
	}

	repeated PegasusShared.BoosterInfo list = 1;
}

message BoosterTallyList {
	enum PacketID {
		ID = 313;
	}

	repeated BoosterTally list = 1;
}

message BoosterContent {
	enum PacketID {
		ID = 226;
	}

	repeated BoosterCard list = 1;
}

message MedalInfo {
	enum PacketID {
		ID = 232;
	}

	required int32 season_wins = 3;
	required int32 stars = 6;
	required int32 streak = 7;
	required int32 star_level = 8;
	required int32 level_start = 9;
	required int32 level_end = 10;
	required bool can_lose = 11;
	optional int32 legend_rank = 13;
	optional int32 best_star_level = 14;
}

message MedalHistory {
	enum PacketID {
		ID = 234;
	}

	repeated MedalHistoryInfo medals = 1;
}

message GamesInfo {
	enum PacketID {
		ID = 208;
	}

	required int32 games_started = 1;
	required int32 games_won = 2;
	required int32 games_lost = 3;
	required int32 free_reward_progress = 4;
}

message PurchaseMethod {
	enum PacketID {
		ID = 272;
	}

	optional string product_id = 1;
	optional int32 quantity = 2;
	optional int32 currency = 3;
	optional string wallet_name = 4;
	optional bool use_ebalance = 5;
	optional PurchaseError error = 6;
	optional int64 transaction_id = 7;
	optional bool is_zero_cost_license = 8;
}

message PurchaseResponse {
	enum PacketID {
		ID = 256;
	}

	required PurchaseError error = 1;
	optional int64 transaction_id = 2;
	optional string product_id = 3;
	optional string third_party_id = 4;
	optional int32 currency = 5;
	optional bool is_zero_cost_license = 6;
	optional string challenge_id = 7;
	optional string challenge_url = 8;
}

message BattlePayConfigResponse {
	enum PacketID {
		ID = 238;
	}

	repeated Bundle bundles = 1;
	optional int32 currency = 2;
	optional bool unavailable = 4;
	optional int32 secs_before_auto_cancel = 5;
	repeated GoldCostBooster gold_cost_boosters = 6;
	optional int64 gold_cost_arena = 7;
}

message BattlePayStatusResponse {
	enum PurchaseState {
		PS_READY = 0;
		PS_CHECK_RESULTS = 1;
		PS_ERROR = 2;
	}
	enum PacketID {
		ID = 265;
	}

	required PurchaseState status = 1;
	optional string product_id = 2;
	optional PurchaseError purchase_error = 3;
	required bool battle_pay_available = 4;
	optional int64 transaction_id = 5;
	optional string third_party_id = 6;
	optional int32 currency = 7;
	optional PegasusShared.BattlePayProvider provider = 8 [default = BP_PROVIDER_BLIZZARD];
}

message Error37 {
	enum ThrottleReason {
		TR_DB_LOAD = 0;
	}
	enum PacketID {
		ID = 266;
	}

	required ThrottleReason reason = 1;
	required int64 retry_millis = 2;
}

message MassDisenchantResponse {
	enum PacketID {
		ID = 269;
	}

	required int32 amount = 1;
}

message PlayerRecords {
	enum PacketID {
		ID = 270;
	}

	repeated PlayerRecord records = 1;
}

message RewardProgress {
	enum PacketID {
		ID = 271;
	}

	required PegasusShared.Date season_end = 1;
	required int32 wins_per_gold = 2;
	required int32 gold_per_reward = 3;
	required int32 max_gold_per_day = 4;
	required int32 season_number = 5;
	optional int32 pack_id = 8;
	required int32 xp_solo_limit = 9;
	required int32 max_hero_level = 10;
	required PegasusShared.Date next_quest_cancel = 11;
	required float event_timing_mod = 12;
}

message CancelPurchaseResponse {
	enum CancelResult {
		CR_SUCCESS = 1;
		CR_NOT_ALLOWED = 2;
		CR_NOTHING_TO_CANCEL = 3;
	}
	enum PacketID {
		ID = 275;
	}

	required CancelResult result = 1;
	optional int64 transaction_id = 2;
	optional string product_id = 3;
	optional int32 currency = 4;
}

message CheckLicensesResponse {
	enum PacketID {
		ID = 277;
	}

	required bool account_level = 1;
	required bool success = 2;
}

message PurchaseWithGoldResponse {
	enum PurchaseResult {
		PR_SUCCESS = 1;
		PR_INSUFFICIENT_FUNDS = 2;
		PR_PRODUCT_NA = 3;
		PR_FEATURE_NA = 4;
		PR_INVALID_QUANTITY = 5;
	}
	enum PacketID {
		ID = 280;
	}

	required PurchaseResult result = 1;
	optional int64 gold_used = 2;
}

message CancelQuestResponse {
	enum PacketID {
		ID = 282;
	}

	required int32 quest_id = 1;
	required bool success = 2;
	optional PegasusShared.Date next_quest_cancel = 3;
}

message HeroXP {
	enum PacketID {
		ID = 283;
	}

	repeated HeroXPInfo xp_infos = 1;
}

message SetCardBackResponse {
	enum PacketID {
		ID = 292;
	}

	required bool success = 1;
	required int32 card_back = 2;
}

message ThirdPartyPurchaseStatusResponse {
	enum Status {
		NOT_FOUND = 1;
		SUCCEEDED = 2;
		FAILED = 3;
		IN_PROGRESS = 4;
	}
	enum PacketID {
		ID = 295;
	}

	required string third_party_id = 1;
	required Status status = 2;
}

message SetProgressResponse {
	enum Result {
		SUCCESS = 1;
		FAILED = 2;
		ALREADY_DONE = 3;
	}
	enum PacketID {
		ID = 296;
	}

	required Result result = 1;
	optional int64 progress = 2;
}

message TriggerEventResponse {
	enum PacketID {
		ID = 299;
	}

	required int32 event_id = 1;
	required bool success = 2;
}

message AssetsVersionResponse {
	enum PacketID {
		ID = 304;
	}

	required int32 version = 1;
}

message AdventureProgressResponse {
	enum PacketID {
		ID = 306;
	}

	repeated PegasusShared.AdventureProgress list = 1;
}

message AccountLicenseAchieveResponse {
	enum Result {
		INVALID_ACHIEVE = 1;
		NOT_ACTIVE = 2;
		IN_PROGRESS = 3;
		COMPLETE = 4;
		STATUS_UNKNOWN = 5;
	}
	enum PacketID {
		ID = 311;
	}

	required int32 achieve = 1;
	required Result result = 2;
}

message SubscribeResponse {
	enum PacketID {
		ID = 315;
	}
	enum Features {
		F_SYSTEM_0 = 1;
		F_SYSTEM_1 = 2;
	}

	optional uint64 route = 1;
	optional uint64 supported_features = 2;
	optional uint64 keep_alive_secs = 3;
}

message TavernBrawlInfo {
	enum PacketID {
		ID = 316;
	}

	optional PegasusShared.TavernBrawlSpec current_tavern_brawl = 1;
	optional uint64 next_start_seconds_from_now = 2;
}

message TavernBrawlPlayerRecordResponse {
	enum PacketID {
		ID = 317;
	}

	required int32 deprecated_reward_progress = 1;
	required int32 deprecated_games_played = 2;
	required int32 deprecated_games_won = 3;
	required int32 deprecated_win_streak = 4;
	optional PegasusShared.TavernBrawlPlayerRecord record = 6;
}

message FavoriteHeroesResponse {
	enum PacketID {
		ID = 318;
	}

	repeated PegasusShared.FavoriteHero favorite_heroes = 1;
}

message SetFavoriteHeroResponse {
	enum PacketID {
		ID = 320;
	}

	required bool success = 1;
	optional PegasusShared.FavoriteHero favorite_hero = 2;
}

message GetAssetResponse {
	enum PacketID {
		ID = 322;
	}

	repeated AssetResponse responses = 1;
}

message DebugCommandResponse {
	enum PacketID {
		ID = 324;
	}

	required bool success = 1;
	optional string response = 2;
}

message AccountLicensesInfoResponse {
	enum PacketID {
		ID = 325;
	}

	repeated PegasusShared.AccountLicenseInfo list = 1;
}

enum ProductType {
	PRODUCT_TYPE_UNKNOWN = 0;
	PRODUCT_TYPE_BOOSTER = 1;
	PRODUCT_TYPE_DRAFT = 2;
	PRODUCT_TYPE_NAXX = 3;
	PRODUCT_TYPE_BRM = 4;
	PRODUCT_TYPE_CARD_BACK = 5;
	PRODUCT_TYPE_HERO = 6;
}
