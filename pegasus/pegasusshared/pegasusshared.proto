syntax = "proto3";
package pegasus.pegasusshared;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor


// ref: PegasusShared.AssetType
enum AssetType {
	ASSETTYPE_AUTO_INVALID = 0;
	ASSET_TYPE_SCENARIO = 1;
	ASSET_TYPE_SUBSET_CARD = 2;
	ASSET_TYPE_DECK_RULESET = 3;
	ASSET_TYPE_REWARD_CHEST = 4;
}

// ref: PegasusShared.BattlePayProvider
enum BattlePayProvider {
	BATTLEPAYPROVIDER_AUTO_INVALID = 0;
	BP_PROVIDER_BLIZZARD = 1;
	BP_PROVIDER_APPLE = 2;
	BP_PROVIDER_GOOGLE_PLAY = 3;
	BP_PROVIDER_AMAZON = 4;
}

// ref: PegasusShared.BlizzardCheckoutStatus
enum BlizzardCheckoutStatus {
	BLIZZARDCHECKOUTSTATUS_AUTO_INVALID = 0;
	BLIZZARD_CHECKOUT_STATUS_START = 1;
	BLIZZARD_CHECKOUT_STATUS_CANCELED = 2;
	BLIZZARD_CHECKOUT_STATUS_COMPLETED_FAILED = 3;
	BLIZZARD_CHECKOUT_STATUS_COMPLETED_SUCCESS = 4;
}

// ref: PegasusShared.BrawlType
enum BrawlType {
	option allow_alias = true;
	BRAWL_TYPE_UNKNOWN = 0;
	BRAWL_TYPE_TAVERN_BRAWL = 1;
	BRAWL_TYPE_FIRST = 1;
	BRAWL_TYPE_FIRESIDE_GATHERING = 2;
	BRAWL_TYPE_COUNT = 3;
}

// ref: PegasusShared.DatabaseAction
enum DatabaseAction {
	DB_A_UNKNOWN = 0;
	DB_A_GET_DECK = 1;
	DB_A_CREATE_DECK = 2;
	DB_A_RENAME_DECK = 3;
	DB_A_DELETE_DECK = 4;
	DB_A_SET_DECK = 5;
	DB_A_OPEN_BOOSTER = 6;
	DB_A_GAMES_INFO = 7;
}

// ref: PegasusShared.DatabaseResult
enum DatabaseResult {
	DB_E_UNKNOWN = 0;
	DB_E_SQL_EX = -1;
	DB_E_SUCCESS = 1;
	DB_E_NOT_OWNED = 2;
	DB_E_CONSTRAINT = 3;
	DB_E_NOT_FOUND = 4;
	DB_E_EXCEPTION = 9;
	DB_E_BAD_PARAM = 11;
	DB_E_DECK_IS_LOCKED = 12;
}

// ref: PegasusShared.DeckSourceType
enum DeckSourceType {
	DECK_SOURCE_TYPE_UNKNOWN = 0;
	DECK_SOURCE_TYPE_NORMAL = 1;
	DECK_SOURCE_TYPE_TEMPLATE = 2;
	DECK_SOURCE_TYPE_BASIC_DECK = 3;
	DECK_SOURCE_TYPE_INNKEEPER_DECK = 4;
	DECK_SOURCE_TYPE_PASTED_DECK = 5;
}

// ref: PegasusShared.DeckType
enum DeckType {
	UNKNOWN_DECK_TYPE = 0;
	CLIENT_ONLY_DECK = -1;
	NORMAL_DECK = 1;
	AI_DECK = 2;
	DRAFT_DECK = 4;
	PRECON_DECK = 5;
	TAVERN_BRAWL_DECK = 6;
	FSG_BRAWL_DECK = 7;
	HIDDEN_DECK = 1000;
}

// ref: PegasusShared.DraftSlotType
enum DraftSlotType {
	DRAFT_SLOT_NONE = 0;
	DRAFT_SLOT_CARD = 1;
	DRAFT_SLOT_HERO = 2;
	DRAFT_SLOT_HERO_POWER = 3;
}

// ref: PegasusShared.ErrorCode
enum ErrorCode {
	ERROR_OK = 0;
	ERROR_HEARTHSTONE_BEGIN = 1000000;
	ERROR_GLOBAL_INVALID_INPUT = 1000001;
	ERROR_GLOBAL_NO_DATA = 1000002;
	ERROR_GLOBAL_NOT_YET_IMPLEMENTED = 1000003;
	ERROR_GLOBAL_DATA_MODIFIED = 1000004;
	ERROR_GLOBAL_INTERNAL_DB_ERROR = 1000005;
	ERROR_GLOBAL_DECK_IS_LOCKED = 1000006;
	ERROR_GLOBAL_FEATURE_DISABLED = 1000007;
	ERROR_GLOBAL_HTTP_ERROR = 1000008;
	ERROR_GLOBAL_JSON_PARSE_ERROR = 1000009;
	ERROR_GLOBAL_INTERNAL_ERROR = 1000010;
	ERROR_GLOBAL_FSG_ID_INVALID = 1000011;
	ERROR_GLOBAL_HTTP_TIMEOUT_OR_ABORTED = 1000012;
	ERROR_GLOBAL_INVALID_HERO_SPECIFIED = 1000013;
	ERROR_GLOBAL_PARSE_ERROR_EXPECTED_NUMERIC_STRING = 1000014;
	ERROR_GLOBAL_BGS_FAILED = 1000015;
	ERROR_GLOBAL_DATABASE_FAILED = 1000016;
	ERROR_SCENARIO_INCORRECT_NUM_PLAYERS = 1000500;
	ERROR_SCENARIO_NO_DECK_SPECIFIED = 1000501;
	ERROR_SCENARIO_MUST_BE_SERVER_ONLY = 1000502;
	ERROR_TAVERN_BRAWL_SEASON_INCREMENTED = 1001000;
	ERROR_TAVERN_BRAWL_NOT_ACTIVE = 1001001;
	ERROR_TAVERN_BRAWL_NO_TICKET = 1001002;
	ERROR_TAVERN_BRAWL_RETIRE_FIRST = 1001003;
	ERROR_TAVERN_BRAWL_NOT_IN_SESSION = 1001004;
	ERROR_TAVERN_BRAWL_NOT_IN_SESSION_BUT_COULD_BE = 1001005;
	ERROR_TAVERN_BRAWL_FEATURE_DISABLED = 1001006;
	ERROR_TAVERN_BRAWL_TICKET_NOT_REQUIRED = 1001007;
	ERROR_TAVERN_BRAWL_FRIENDLY_CHALLENGE_DISABLED = 1001008;
	ERROR_DECK_RULESET_RULE_UNKNOWN_TYPE = 1002000;
	ERROR_DECK_RULESET_RULE_DB_READ_ERROR = 1002001;
	ERROR_DECK_RULESET_RULE_VIOLATION = 1002002;
	ERROR_DECK_RULESET_DECK_CARD_ID_UNKNOWN = 1002003;
	ERROR_DECK_RULESET_HERO_CARD_GUID_UNKNOWN = 1002004;
	ERROR_DECK_RULESET_DECK_CARD_GUID_UNKNOWN = 1002005;
	ERROR_DECK_VALIDATION_DB_WRITE_ERROR = 1002006;
	ERROR_DECK_VALIDATION_WRONG_FORMAT = 1002007;
	ERROR_DECK_RULESET_MUST_BE_SERVER_ONLY = 1002008;
	ERROR_DECK_VALIDATION_LEAGUE_BANNED_CARD = 1002009;
	ERROR_PLAY_GAME_DECK_MODIFIED = 1003000;
	ERROR_PLAY_GAME_FSG_ID_NOT_MATCHING = 1003002;
	ERROR_PLAY_GAME_FSG_PATRON_NOT_CHECKED_IN = 1003003;
	ERROR_PLAY_GAME_FSG_NOT_CURRENTLY_PLAYABLE = 1003004;
	ERROR_PLAY_GAME_SEASON_INCREMENTED = 1003005;
	ERROR_FSG_NO_PERMISSION = 1004000;
	ERROR_FSG_DUPLICATE_REQUEST_IGNORED = 1004001;
	ERROR_FSG_DUPLICATE_REQUEST_ORIGINAL_DROPPED = 1004002;
	ERROR_FSG_ALREADY_CHECKED_IN_FETCH_FSG_INFO = 1004003;
	ERROR_FSG_BSSIDS_NOT_VALID = 1004004;
	ERROR_GAME_SAVE_DATA_INVALID_KEY_REQUESTED = 1005000;
	ERROR_SET_GAME_SAVE_DATA_INVALID_DATA = 1005001;
	ERROR_SET_GAME_SAVE_DATA_INVALID_SUBKEY = 1005002;
	ERROR_SAVE_PROGRESS_RESTRICTED_NO_KEYS_UPDATED = 1005003;
}

// ref: PegasusShared.EventType
enum EventType {
	EVT_NONE = 0;
	EVT_UPDATED = 1;
	EVT_ADDED = 2;
	EVT_REMOVED = 3;
}

// ref: PegasusShared.FormatType
enum FormatType {
	FT_UNKNOWN = 0;
	FT_WILD = 1;
	FT_STANDARD = 2;
}

// ref: PegasusShared.GameSaveOwnerType
enum GameSaveOwnerType {
	option allow_alias = true;
	GAME_SAVE_OWNER_TYPE_UNKNOWN = 0;
	GAME_SAVE_OWNER_TYPE_PLAYER = 1;
	GAME_SAVE_OWNER_TYPE_FIRST = 1;
	GAME_SAVE_OWNER_TYPE_FIRESIDE_GATHERING = 2;
	GAME_SAVE_OWNER_TYPE_COUNT = 3;
}

// ref: PegasusShared.GameType
enum GameType {
	GT_UNKNOWN = 0;
	GT_VS_AI = 1;
	GT_VS_FRIEND = 2;
	GT_TUTORIAL = 4;
	GT_ARENA = 5;
	GT_TEST_AI_VS_AI = 6;
	GT_RANKED = 7;
	GT_CASUAL = 8;
	GT_TAVERNBRAWL = 16;
	GT_TB_1P_VS_AI = 17;
	GT_TB_2P_COOP = 18;
	GT_FSG_BRAWL_VS_FRIEND = 19;
	GT_FSG_BRAWL = 20;
	GT_FSG_BRAWL_1P_VS_AI = 21;
	GT_FSG_BRAWL_2P_COOP = 22;
	GT_LAST = 23;
}

// ref: PegasusShared.RecruitAFriendState
enum RecruitAFriendState {
	RECRUITAFRIENDSTATE_AUTO_INVALID = 0;
	RAF_RECRUITABLE = 1;
	RAF_RECRUITED = 2;
	RAF_GRADUATED = 3;
	RAF_VALEDICTORIAN = 4;
	RAF_NOT_RECRUITABLE_WRONG_REGION = 1000;
	RAF_NOT_RECRUITABLE_TOO_OLD = 1001;
	RAF_GRADUATED_WITHOUT_RECRUITER = 1002;
}

// ref: PegasusShared.ReturningPlayerStatus
enum ReturningPlayerStatus {
	RPS_UNKNOWN = 0;
	RPS_NOT_RETURNING_PLAYER = 1;
	RPS_ACTIVE = 2;
	RPS_COMPLETE = 3;
	RPS_ACTIVE_OPTED_OUT_QUEST1 = 4;
	RPS_ACTIVE_WITH_MANY_LOSSES = 5;
}

// ref: PegasusShared.RewardTrigger
enum RewardTrigger {
	REWARD_TRIGGER_UNKNOWN = 0;
	REWARD_TRIGGER_NONE = 1;
	REWARD_TRIGGER_WIN_GAME = 2;
	REWARD_TRIGGER_FINISH_GAME = 3;
	REWARD_TRIGGER_FINISH_SESSION = 4;
}

// ref: PegasusShared.RewardType
enum RewardType {
	REWARD_UNKNOWN = 0;
	REWARD_NONE = 1;
	REWARD_ADVENTURE_PROGRESS = 2;
	REWARD_ARCANE_DUST = 3;
	REWARD_BASIC_CARD = 4;
	REWARD_BOOSTER_PACKS = 5;
	REWARD_CARD_BACK = 6;
	REWARD_CARD_ID = 7;
	REWARD_CARD_ID_2X = 8;
	REWARD_CARD_SET = 9;
	DEPRECATED_REWARD_CRAFTABLE_GOLDEN = 10;
	REWARD_GOLD = 11;
	REWARD_GOLD_HERO = 12;
	REWARD_FORGE_TICKETS = 13;
	REWARD_HERO = 14;
	REWARD_EXTERNAL_GAME_MOUNT = 15;
	REWARD_CHEST = 16;
	REWARD_RETURNING_PLAYER_COMPLETE = 17;
	REWARD_EVENT_NOTICE = 18;
	REWARD_GENERIC_REWARD_CHEST = 19;
	REWARD_DAILY_QUEST = 20;
	REWARD_ADVENTURE_OWNERSHIP = 21;
}

// ref: PegasusShared.RuleType
enum RuleType {
	RULE_NONE = 0;
	RULE_CHOOSE_HERO = 1;
	RULE_CHOOSE_DECK = 2;
}

// ref: PegasusShared.TavernBrawlMode
enum TavernBrawlMode {
	TB_MODE_NORMAL = 0;
	TB_MODE_HEROIC = 1;
}

// ref: PegasusShared.TavernBrawlStatus
enum TavernBrawlStatus {
	TB_STATUS_INVALID = 0;
	TB_STATUS_TICKET_REQUIRED = 1;
	TB_STATUS_ACTIVE = 2;
	TB_STATUS_IN_REWARDS = 3;
}

// ref: PegasusShared.TavernSignType
enum TavernSignType {
	TAVERN_SIGN_TYPE_DEFAULT = 0;
	TAVERN_SIGN_TYPE_CUSTOM = 1;
}

// ref: PegasusShared.AccountLicenseInfo
message AccountLicenseInfo {
	// ref: PegasusShared.AccountLicenseInfo/Flags
	enum Flags {
		FLAGS_AUTO_INVALID = 0;
		OWNED = 1;
	}

	int64 license = 1;
	uint64 flags = 2;
	int64 cas_id = 3;
}

// ref: PegasusShared.AdventureProgress
message AdventureProgress {
	// ref: PegasusShared.AdventureProgress/Flags
	enum Flags {
		FLAGS_AUTO_INVALID = 0;
		OWNED = 1;
		DEFEAT_HEROIC_MISSION_1 = 2;
		DEFEAT_HEROIC_MISSION_2 = 4;
		DEFEAT_HEROIC_MISSION_3 = 8;
		DEFEAT_HEROIC_MISSION_4 = 16;
		DEFEAT_CLASS_CHALLENGE_MISSION_1 = 256;
		DEFEAT_CLASS_CHALLENGE_MISSION_2 = 512;
		DEFEAT_CLASS_CHALLENGE_MISSION_3 = 1024;
	}

	int32 wing_id = 1;
	int32 progress = 2;
	int32 ack = 3;
	uint64 flags = 4;
}

// ref: PegasusShared.ArenaSeasonSpec
message ArenaSeasonSpec {
	GameContentSeasonSpec game_content_season = 1;
	string reward_paper_prefab = 2;
	string reward_paper_prefab_phone = 3;
	string draft_paper_texture = 4;
	string draft_paper_texture_phone = 5;
	string draft_paper_text_color = 6;
	repeated LocalizedString strings = 100 [packed=false];
}

// ref: PegasusShared.AssetKey
message AssetKey {
	AssetType type = 1;
	int32 asset_id = 2;
}

// ref: PegasusShared.AssetRecordInfo
message AssetRecordInfo {
	AssetKey asset = 1;
	uint32 record_byte_size = 2;
	bytes record_hash = 3;
}

// ref: PegasusShared.BnetId
message BnetId {
	uint64 hi = 1;
	uint64 lo = 2;
}

// ref: PegasusShared.BoosterInfo
message BoosterInfo {
	int32 type = 2;
	int32 count = 3;
}

// ref: PegasusShared.CachedCard
message CachedCard {
	int64 card_id = 1;
	int32 asset_card_id = 2;
	int32 unix_timestamp = 3;
	bool is_seen = 4;
	int32 premium = 5;
	int32 insert_source = 6;
	int64 insert_data = 7;
}

// ref: PegasusShared.CachedCollection
message CachedCollection {
	repeated CachedCard card_collection = 1 [packed=false];
}

// ref: PegasusShared.CardDef
message CardDef {
	int32 asset = 1;
	int32 premium = 2;
}

// ref: PegasusShared.CardStack
message CardStack {
	CardDef card_def = 1;
	Date latest_insert_date = 2;
	int32 count = 3;
	int32 num_seen = 4;
}

// ref: PegasusShared.Currency
message Currency {
	// ref: PegasusShared.Currency/Tax
	enum Tax {
		TAX_INCLUDED = 0;
		TAX_ADDED = 1;
		NO_TAX = 2;
	}

	string code = 1;
	int32 currency_id = 2;
	int32 sub_region_id = 3;
	string symbol = 4;
	int32 rounding_exponent = 5;
	Tax tax_text = 6;
	int32 changed_version = 9;
}

// ref: PegasusShared.DatabaseDeckCard
message DatabaseDeckCard {
	int32 asset_card_id = 1;
	int32 premium = 2;
	int32 quantity = 3;
}

// ref: PegasusShared.DatabaseDeckContent
message DatabaseDeckContent {
	repeated DatabaseDeckCard deck_cards = 1 [packed=false];
}

// ref: PegasusShared.Date
message Date {
	int32 year = 1;
	int32 month = 2;
	int32 day = 3;
	int32 hours = 4;
	int32 min = 5;
	int32 sec = 6;
}

// ref: PegasusShared.DeckCardData
message DeckCardData {
	CardDef def = 1;
	int32 qty = 3;
}

// ref: PegasusShared.DeckInfo
message DeckInfo {
	// ref: PegasusShared.DeckInfo/ValidityFlags
	enum ValidityFlags {
		VALIDITYFLAGS_AUTO_INVALID = 0;
		UNLOCKED_HERO_CLASS = 1;
		OWNS_CARDS = 2;
		HAS_30_CARDS = 4;
		OBEYS_MAXES = 8;
		CLASS_MATCHES = 16;
		OWNS_CARD_BACK = 32;
		OWNS_HERO = 64;
		TAGGED_STANDARD = 128;
		NEEDS_VALIDATION = 256;
		NEEDS_NAME = 512;
		LOCKED_DECK = 1024;
	}

	int64 id = 1;
	string name = 2;
	int32 card_back = 3;
	int32 hero = 4;
	DeckType deck_type = 5;
	uint64 validity = 6;
	int32 hero_premium = 7;
	bool card_back_override = 8;
	bool hero_override = 9;
	int64 last_modified = 10;
	int32 season_id = 11;
	int64 sort_order = 12;
	int64 create_date = 13;
	DeckSourceType source_type = 14;
	string pasted_deck_hash = 15;
	int32 brawl_library_item_id = 16;
	int32 ui_hero_override = 17;
	int32 ui_hero_override_premium = 18;
}

// ref: PegasusShared.DeckRulesetDbRecord
message DeckRulesetDbRecord {
	int32 id = 1;
	repeated DeckRulesetRuleDbRecord rules = 2 [packed=false];
}

// ref: PegasusShared.DeckRulesetRuleDbRecord
message DeckRulesetRuleDbRecord {
	int32 id = 1;
	int32 deck_ruleset_id = 2;
	int32 applies_to_subset_id = 3;
	bool applies_to_is_not = 4;
	string rule_type = 5;
	bool rule_is_not = 6;
	int32 min_value = 7;
	int32 max_value = 8;
	int32 tag = 9;
	int32 tag_min_value = 10;
	int32 tag_max_value = 11;
	string string_value = 12;
	repeated int32 target_subset_ids = 13 [packed=false];
	bool show_invalid_cards = 14;
	repeated LocalizedString strings = 100 [packed=false];
}

// ref: PegasusShared.DeckRulesetValidationResults
message DeckRulesetValidationResults {
	int32 deck_ruleset_id = 1;
	ErrorCode error_code = 2;
	repeated DeckRulesetViolation violations = 3 [packed=false];
}

// ref: PegasusShared.DeckRulesetViolation
message DeckRulesetViolation {
	CardDef card = 1;
	int32 count = 2;
	int32 deck_rule_id = 100;
	string deck_rule_desc = 101;
}

// ref: PegasusShared.FavoriteHero
message FavoriteHero {
	int32 class_id = 1;
	CardDef hero = 2;
}

// ref: PegasusShared.FSGConfig
message FSGConfig {
	int64 fsg_id = 1;
	int64 unix_start_time_with_slush = 2;
	int64 unix_end_time_with_slush = 3;
	string tavern_name = 4;
	TavernSignData sign_data = 5;
	int64 unix_official_start_time = 6;
	int64 patron_count = 7;
	bool is_innkeeper = 8;
	bool is_setup_complete = 9;
	int64 unix_official_end_time = 10;
	BnetId fsg_innkeeper_account_id = 11;
	bool is_large_scale_fsg = 12;
	string fsg_name = 13;
	int64 tavern_id = 14;
}

// ref: PegasusShared.FSGPatron
message FSGPatron {
	BnetId game_account = 1;
	BnetId bnet_account = 2;
}

// ref: PegasusShared.GameConnectionInfo
message GameConnectionInfo {
	string address = 1;
	int32 game_handle = 2;
	int64 client_handle = 3;
	int32 port = 4;
	string version = 5;
	string aurora_password = 6;
	int32 scenario = 7;
	GameType game_type = 8;
	FormatType format_type = 9;
	int32 brawl_library_item_id = 10;
}

// ref: PegasusShared.GameContentScenario
message GameContentScenario {
	int32 library_item_id = 1;
	bool is_required = 2;
	bool is_fallback = 3;
	int32 scenario_id = 4;
	uint32 scenario_record_byte_size = 5;
	bytes scenario_record_hash = 6;
	FormatType format_type = 7;
	RewardType reward_type = 8;
	int64 reward_data1 = 9;
	int64 reward_data2 = 10;
	RewardTrigger reward_trigger = 11;
	int32 reward_trigger_quota = 12;
	TavernBrawlMode brawl_mode = 13;
	int32 ticket_type = 14;
	int32 max_wins = 15;
	int32 max_losses = 16;
	int32 max_sessions = 17;
	uint32 free_sessions = 18;
	uint64 closed_to_new_sessions_seconds_from_now = 19;
	bool friendly_challenge_disabled = 20;
	int32 first_time_seen_dialog_id = 21;
	bool is_prerelease = 22;
	repeated AssetRecordInfo additional_assets = 100 [packed=false];
}

// ref: PegasusShared.GameContentSeasonSpec
message GameContentSeasonSpec {
	uint64 end_seconds_from_now = 1;
	int32 deprecated_scenario_id = 2;
	uint32 deprecated_scenario_record_byte_size = 3;
	bytes deprecated_scenario_record_hash = 4;
	RewardType deprecated_reward_type = 5;
	int64 deprecated_reward_data1 = 6;
	int64 deprecated_reward_data2 = 7;
	RewardTrigger deprecated_reward_trigger = 8;
	FormatType deprecated_format_type = 9;
	int32 season_id = 11;
	int32 deprecated_ticket_type = 12;
	int32 deprecated_max_wins = 13;
	int32 deprecated_max_losses = 14;
	uint64 deprecated_closed_to_new_sessions_seconds_from_now = 15;
	int32 deprecated_max_sessions = 16;
	bool deprecated_friendly_challenge_disabled = 17;
	int32 season_end_second_spread_count = 18;
	int32 deprecated_first_time_seen_dialog_id = 19;
	int32 deprecated_reward_trigger_quota = 20;
	uint32 deprecated_free_sessions = 21;
	bool deprecated_is_prerelease = 22;
	repeated GameContentScenario scenarios = 23 [packed=false];
	repeated AssetRecordInfo deprecated_additional_assets = 100 [packed=false];
}

// ref: PegasusShared.GameSaveDataUpdate
message GameSaveDataUpdate {
	EventType event_type = 1;
	GameSaveOwnerType owner_type = 2;
	int64 owner_id = 3;
	repeated GameSaveKey tuple = 4 [packed=false];
	GameSaveDataValue value = 100;
}

// ref: PegasusShared.GameSaveDataValue
message GameSaveDataValue {
	repeated int64 int_value = 1 [packed=false];
	repeated double float_value = 2 [packed=false];
	repeated string string_value = 3 [packed=false];
	repeated int64 map_keys = 10 [packed=false];
	repeated GameSaveDataValue map_values = 11 [packed=false];
	int64 create_date_unix_timestamp = 1000;
	int64 modify_date_unix_timestamp = 1001;
}

// ref: PegasusShared.GameSaveKey
message GameSaveKey {
	int64 id = 1;
	string name = 2;
}

// ref: PegasusShared.GPSCoords
message GPSCoords {
	double latitude = 1;
	double longitude = 2;
	double accuracy = 3;
}

// ref: PegasusShared.LocalizedString
message LocalizedString {
	string key = 1;
	string deprecated_value = 2;
	int32 deprecated_locale = 3;
	repeated LocalizedStringValue values = 4 [packed=false];
}

// ref: PegasusShared.LocalizedStringValue
message LocalizedStringValue {
	int32 locale = 1;
	string value = 2;
}

// ref: PegasusShared.Platform
message Platform {
	int32 os = 1;
	int32 screen = 2;
	string name = 3;
	int32 store = 4;
	string unique_device_identifier = 5;
}

// ref: PegasusShared.PlayerIdentity
message PlayerIdentity {
	int64 player_id = 1;
	BnetId game_account = 2;
	BnetId account = 3;
}

// ref: PegasusShared.ProfileNoticeAccountLicense
message ProfileNoticeAccountLicense {
	// ref: PegasusShared.ProfileNoticeAccountLicense/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 16;
	}

	int64 license = 1;
	int64 cas_id = 2;
}

// ref: PegasusShared.ProfileNoticeAdventureProgress
message ProfileNoticeAdventureProgress {
	// ref: PegasusShared.ProfileNoticeAdventureProgress/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 14;
	}

	int32 wing_id = 1;
}

// ref: PegasusShared.ProfileNoticeBonusStars
message ProfileNoticeBonusStars {
	// ref: PegasusShared.ProfileNoticeBonusStars/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 12;
	}

	int32 star_level = 1;
	int32 stars = 2;
}

// ref: PegasusShared.ProfileNoticeCardBack
message ProfileNoticeCardBack {
	// ref: PegasusShared.ProfileNoticeCardBack/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 11;
	}

	int32 card_back = 1;
}

// ref: PegasusShared.ProfileNoticeDisconnectedGameResult
message ProfileNoticeDisconnectedGameResult {
	// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/GameResult
	enum GameResult {
		GR_UNKNOWN = 0;
		GR_PLAYING = 1;
		GR_WINNER = 2;
		GR_TIE = 3;
	}

	// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 4;
	}

	// ref: PegasusShared.ProfileNoticeDisconnectedGameResult/PlayerResult
	enum PlayerResult {
		PR_UNKNOWN = 0;
		PR_WON = 1;
		PR_LOST = 2;
		PR_DISCONNECTED = 3;
		PR_QUIT = 4;
	}

	GameType game_type = 8;
	int32 mission_id = 9;
	GameResult game_result = 10;
	PlayerResult your_result = 11;
	PlayerResult opponent_result = 12;
	FormatType format_type = 13;
}

// ref: PegasusShared.ProfileNoticeGenericRewardChest
message ProfileNoticeGenericRewardChest {
	// ref: PegasusShared.ProfileNoticeGenericRewardChest/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 20;
	}

	int32 reward_chest_asset_id = 1;
	RewardChest reward_chest = 2;
	uint32 reward_chest_byte_size = 3;
	bytes reward_chest_hash = 4;
}

// ref: PegasusShared.ProfileNoticeLeaguePromotionRewards
message ProfileNoticeLeaguePromotionRewards {
	// ref: PegasusShared.ProfileNoticeLeaguePromotionRewards/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 21;
	}

	RewardChest reward_chest = 1;
	int32 league_id = 2;
}

// ref: PegasusShared.ProfileNoticeLevelUp
message ProfileNoticeLevelUp {
	// ref: PegasusShared.ProfileNoticeLevelUp/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 15;
	}

	int32 hero_class = 1;
	int32 new_level = 2;
}

// ref: PegasusShared.ProfileNoticeMedal
message ProfileNoticeMedal {
	// ref: PegasusShared.ProfileNoticeMedal/MedalType
	enum MedalType {
		UNKNOWN_MEDAL = 0;
		STANDARD_MEDAL = 1;
		WILD_MEDAL = 2;
	}

	// ref: PegasusShared.ProfileNoticeMedal/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 1;
	}

	int32 star_level = 1;
	int32 legend_rank = 2;
	int32 best_star_level = 3;
	RewardChest chest = 4;
	MedalType medal_type = 5;
	int32 league_id = 6;
}

// ref: PegasusShared.ProfileNoticePreconDeck
message ProfileNoticePreconDeck {
	// ref: PegasusShared.ProfileNoticePreconDeck/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 5;
	}

	int64 deck = 1;
	int32 hero = 2;
}

// ref: PegasusShared.ProfileNoticePurchase
message ProfileNoticePurchase {
	// ref: PegasusShared.ProfileNoticePurchase/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 10;
	}

	string product_id = 1;
	int64 data = 2;
	int32 currency_deprecated = 3;
	string currency_code = 4;
}

// ref: PegasusShared.ProfileNoticeRewardBooster
message ProfileNoticeRewardBooster {
	// ref: PegasusShared.ProfileNoticeRewardBooster/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 2;
	}

	int32 booster_type = 1;
	int32 booster_count = 2;
}

// ref: PegasusShared.ProfileNoticeRewardCard
message ProfileNoticeRewardCard {
	// ref: PegasusShared.ProfileNoticeRewardCard/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 3;
	}

	CardDef card = 1;
	int32 quantity = 2;
}

// ref: PegasusShared.ProfileNoticeRewardCard2x
message ProfileNoticeRewardCard2x {
	// ref: PegasusShared.ProfileNoticeRewardCard2x/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 13;
	}

}

// ref: PegasusShared.ProfileNoticeRewardDust
message ProfileNoticeRewardDust {
	// ref: PegasusShared.ProfileNoticeRewardDust/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 6;
	}

	int32 amount = 1;
}

// ref: PegasusShared.ProfileNoticeRewardForge
message ProfileNoticeRewardForge {
	// ref: PegasusShared.ProfileNoticeRewardForge/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 8;
	}

	int32 quantity = 1;
}

// ref: PegasusShared.ProfileNoticeRewardGold
message ProfileNoticeRewardGold {
	// ref: PegasusShared.ProfileNoticeRewardGold/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 9;
	}

	int32 amount = 1;
}

// ref: PegasusShared.ProfileNoticeRewardMount
message ProfileNoticeRewardMount {
	// ref: PegasusShared.ProfileNoticeRewardMount/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 7;
	}

	int32 mount_id = 1;
}

// ref: PegasusShared.ProfileNoticeTavernBrawlRewards
message ProfileNoticeTavernBrawlRewards {
	// ref: PegasusShared.ProfileNoticeTavernBrawlRewards/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 17;
	}

	RewardChest reward_chest = 1;
	int32 num_wins = 2;
	TavernBrawlMode brawl_mode = 3;
}

// ref: PegasusShared.ProfileNoticeTavernBrawlTicket
message ProfileNoticeTavernBrawlTicket {
	// ref: PegasusShared.ProfileNoticeTavernBrawlTicket/NoticeID
	enum NoticeID {
		NOTICEID_AUTO_INVALID = 0;
		ID = 18;
	}

	int32 ticket_type = 1;
	int32 quantity = 2;
}

// ref: PegasusShared.RewardBag
message RewardBag {
	ProfileNoticeRewardBooster reward_booster = 1;
	ProfileNoticeRewardCard reward_card = 2;
	ProfileNoticeRewardDust reward_dust = 3;
	ProfileNoticeRewardGold reward_gold = 4;
	ProfileNoticeCardBack reward_card_back = 5;
	ProfileNoticeRewardForge reward_arena_ticket = 6;
}

// ref: PegasusShared.RewardChest
message RewardChest {
	RewardBag bag1 = 1;
	RewardBag bag2 = 2;
	RewardBag bag3 = 3;
	RewardBag bag4 = 4;
	RewardBag bag5 = 5;
	repeated RewardBag bag = 6 [packed=false];
}

// ref: PegasusShared.RewardChestDbRecord
message RewardChestDbRecord {
	int32 id = 1;
	bool show_to_returning_player = 2;
	repeated LocalizedString strings = 100 [packed=false];
}

// ref: PegasusShared.ScenarioDbRecord
message ScenarioDbRecord {
	int32 id = 1;
	string note_desc = 2;
	int32 num_players = 3;
	int64 player1_hero_card_id = 4;
	int64 player2_hero_card_id = 5;
	bool is_expert = 6;
	int32 adventure_id = 7;
	int32 adventure_mode_id = 8;
	int32 wing_id = 9;
	int32 sort_order = 10;
	int64 client_player2_hero_card_id = 11;
	string tavern_brawl_texture = 12;
	string tavern_brawl_texture_phone = 13;
	Vector2 tavern_brawl_texture_phone_offset = 14;
	bool is_coop = 15;
	int32 deck_ruleset_id = 16;
	RuleType rule_type = 17;
	repeated LocalizedString strings = 100 [packed=false];
}

// ref: PegasusShared.SubsetCardListDbRecord
message SubsetCardListDbRecord {
	int32 subset_id = 1;
	repeated int32 card_ids = 2 [packed=false];
}

// ref: PegasusShared.TavernBrawlPlayerRecord
message TavernBrawlPlayerRecord {
	int32 reward_progress = 1;
	int32 games_played = 2;
	int32 games_won = 3;
	int32 win_streak = 4;
	TavernBrawlStatus session_status = 5;
	int32 num_tickets_owned = 6;
	TavernBrawlPlayerSession session = 7;
	int32 num_sessions_purchasable = 8;
	BrawlType brawl_type = 9;
}

// ref: PegasusShared.TavernBrawlPlayerSession
message TavernBrawlPlayerSession {
	ErrorCode error_code = 1;
	int32 season_id = 2;
	int32 wins = 3;
	int32 losses = 4;
	RewardChest chest = 5;
	bool deck_locked = 6;
	uint32 session_count = 7;
}

// ref: PegasusShared.TavernBrawlSeasonSpec
message TavernBrawlSeasonSpec {
	GameContentSeasonSpec game_content_season = 1;
	string store_instruction_prefab = 2;
	string store_instruction_prefab_phone = 3;
	TavernBrawlMode deprecated_brawl_mode = 4;
	repeated LocalizedString strings = 100 [packed=false];
}

// ref: PegasusShared.TavernSignData
message TavernSignData {
	int32 sign = 1;
	int32 background = 2;
	int32 major = 3;
	int32 minor = 4;
	TavernSignType sign_type = 5;
}

// ref: PegasusShared.Vector2
message Vector2 {
	float x = 1;
	float y = 2;
}

