syntax = "proto3";
package pegasus.pegasusutil;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "pegasus/pegasusshared/pegasusshared.proto";

// ref: PegasusUtil.ProductType
enum ProductType {
	PRODUCT_TYPE_UNKNOWN = 0;
	PRODUCT_TYPE_BOOSTER = 1;
	PRODUCT_TYPE_DRAFT = 2;
	PRODUCT_TYPE_NAXX = 3;
	PRODUCT_TYPE_BRM = 4;
	PRODUCT_TYPE_CARD_BACK = 5;
	PRODUCT_TYPE_HERO = 6;
	PRODUCT_TYPE_LOE = 7;
	PRODUCT_TYPE_WING = 8;
	PRODUCT_TYPE_RANDOM_CARD = 9;
	PRODUCT_TYPE_HIDDEN_LICENSE = 10;
	PRODUCT_TYPE_TAVERN_BRAWL_TICKET = 11;
	PRODUCT_TYPE_CURRENCY = 12;
}

// ref: PegasusUtil.RAFServiceStatus
enum RAFServiceStatus {
	RAFSERVICESTATUS_AUTO_INVALID = 0;
	rafservice_status__ok = 1;
	rafservice_status__not_available = 2;
}

// ref: PegasusUtil.AccountLicenseAchieveResponse
message AccountLicenseAchieveResponse {
	// ref: PegasusUtil.AccountLicenseAchieveResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 311;
	}

	// ref: PegasusUtil.AccountLicenseAchieveResponse/Result
	enum Result {
		RESULT_AUTO_INVALID = 0;
		INVALID_ACHIEVE = 1;
		NOT_ACTIVE = 2;
		IN_PROGRESS = 3;
		COMPLETE = 4;
		STATUS_UNKNOWN = 5;
	}

	int32 achieve = 1;
	Result result = 2;
}

// ref: PegasusUtil.AccountLicensesInfoResponse
message AccountLicensesInfoResponse {
	// ref: PegasusUtil.AccountLicensesInfoResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 325;
	}

	repeated pegasus.pegasusshared.AccountLicenseInfo list = 1 [packed=false];
}

// ref: PegasusUtil.Achieve
message Achieve {
	int32 id = 1;
	int32 progress = 2;
	int32 ack_progress = 3;
	int32 completion_count = 4;
	bool active = 5;
	int32 started_count = 6;
	pegasus.pegasusshared.Date date_given = 7;
	pegasus.pegasusshared.Date date_completed = 8;
	bool do_not_ack = 9;
	int32 interval_reward_count = 10;
	pegasus.pegasusshared.Date interval_reward_start = 11;
}

// ref: PegasusUtil.AchievementNotification
message AchievementNotification {
	int64 player_id = 1;
	int64 achievement_id = 2;
	int32 amount = 3;
	int32 quota = 4;
	pegasus.pegasusshared.Date start_date_local = 5;
	pegasus.pegasusshared.Date end_date_local = 6;
	bool complete = 7;
	bool new_achievement = 8;
	bool remove_achievement = 9;
}

// ref: PegasusUtil.AchievementNotifications
message AchievementNotifications {
	repeated AchievementNotification achievement_notifications = 1 [packed=false];
}

// ref: PegasusUtil.Achieves
message Achieves {
	repeated Achieve list = 1 [packed=false];
}

// ref: PegasusUtil.AckAchieveProgress
message AckAchieveProgress {
	// ref: PegasusUtil.AckAchieveProgress/PacketID
	enum PacketID {
		system = 0;
		ID = 243;
	}

	int32 id = 1;
	int32 ack_progress = 2;
}

// ref: PegasusUtil.AckCardSeen
message AckCardSeen {
	// ref: PegasusUtil.AckCardSeen/PacketID
	enum PacketID {
		system = 0;
		ID = 223;
	}

	repeated pegasus.pegasusshared.CardDef card_defs = 1 [packed=false];
}

// ref: PegasusUtil.AckNotice
message AckNotice {
	// ref: PegasusUtil.AckNotice/PacketID
	enum PacketID {
		system = 0;
		ID = 213;
	}

	int64 entry = 1;
}

// ref: PegasusUtil.AcknowledgeBanner
message AcknowledgeBanner {
	// ref: PegasusUtil.AcknowledgeBanner/PacketID
	enum PacketID {
		system = 0;
		ID = 309;
	}

	int32 banner = 1;
}

// ref: PegasusUtil.AckWingProgress
message AckWingProgress {
	// ref: PegasusUtil.AckWingProgress/PacketID
	enum PacketID {
		system = 0;
		ID = 308;
	}

	int32 wing = 1;
	int32 ack = 2;
}

// ref: PegasusUtil.AdventureProgressResponse
message AdventureProgressResponse {
	// ref: PegasusUtil.AdventureProgressResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 306;
	}

	repeated pegasus.pegasusshared.AdventureProgress list = 1 [packed=false];
}

// ref: PegasusUtil.ArenaSeasonInfo
message ArenaSeasonInfo {
	pegasus.pegasusshared.ArenaSeasonSpec season = 1;
	uint64 next_start_seconds_from_now = 2;
	int32 season_ending_soon_days = 3;
	string season_ending_soon_prefab = 4;
	int32 next_season_id = 5;
	int32 next_season_coming_soon_days = 6;
	string next_season_coming_soon_prefab = 7;
	repeated pegasus.pegasusshared.LocalizedString next_season_strings = 8 [packed=false];
	string season_ending_soon_prefab_extra = 9;
	string next_season_coming_soon_prefab_extra = 10;
}

// ref: PegasusUtil.ArenaSession
message ArenaSession {
	int32 wins = 1;
	int32 losses = 2;
	bool is_active = 3;
	bool is_in_rewards = 4;
	ArenaSeasonInfo info = 100;
}

// ref: PegasusUtil.ArenaSessionRequest
message ArenaSessionRequest {
	// ref: PegasusUtil.ArenaSessionRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 346;
	}

}

// ref: PegasusUtil.ArenaSessionResponse
message ArenaSessionResponse {
	// ref: PegasusUtil.ArenaSessionResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 351;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
	ArenaSession session = 2;
	ArenaSeasonInfo current_season = 3;
}

// ref: PegasusUtil.AssetResponse
message AssetResponse {
	pegasus.pegasusshared.AssetKey requested_key = 1;
	pegasus.pegasusshared.DatabaseResult deprecated_database_result = 2;
	pegasus.pegasusshared.ErrorCode error_code = 3;
	pegasus.pegasusshared.ScenarioDbRecord scenario_asset = 100;
	pegasus.pegasusshared.SubsetCardListDbRecord subset_card_list_asset = 101;
	pegasus.pegasusshared.DeckRulesetDbRecord deck_ruleset_asset = 102;
	pegasus.pegasusshared.RewardChestDbRecord reward_chest_asset = 103;
}

// ref: PegasusUtil.AssetsVersionResponse
message AssetsVersionResponse {
	// ref: PegasusUtil.AssetsVersionResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 304;
	}

	int32 version = 1;
	ReturningPlayerInfo returning_player_info = 2;
}

// ref: PegasusUtil.BattlePayConfigResponse
message BattlePayConfigResponse {
	// ref: PegasusUtil.BattlePayConfigResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 238;
	}

	repeated Bundle bundles = 1 [packed=false];
	int32 currency_deprecated = 2;
	bool unavailable = 4;
	int32 secs_before_auto_cancel = 5;
	repeated GoldCostBooster gold_cost_boosters = 6 [packed=false];
	int64 gold_cost_arena = 7;
	string default_currency_code = 8;
	repeated pegasus.pegasusshared.Currency currencies = 9 [packed=false];
}

// ref: PegasusUtil.BattlePayStatusResponse
message BattlePayStatusResponse {
	// ref: PegasusUtil.BattlePayStatusResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 265;
	}

	// ref: PegasusUtil.BattlePayStatusResponse/PurchaseState
	enum PurchaseState {
		PS_READY = 0;
		PS_CHECK_RESULTS = 1;
		PS_ERROR = 2;
	}

	PurchaseState status = 1;
	string product_id = 2;
	PurchaseError purchase_error = 3;
	bool battle_pay_available = 4;
	int64 transaction_id = 5;
	string third_party_id = 6;
	int32 currency_deprecated = 7;
	pegasus.pegasusshared.BattlePayProvider provider = 8;
	string currency_code = 9;
}

// ref: PegasusUtil.BoosterCard
message BoosterCard {
	pegasus.pegasusshared.CardDef card_def = 1;
	pegasus.pegasusshared.Date insert_date = 2;
}

// ref: PegasusUtil.BoosterContent
message BoosterContent {
	// ref: PegasusUtil.BoosterContent/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 226;
	}

	repeated BoosterCard list = 1 [packed=false];
	int64 collection_version = 2;
}

// ref: PegasusUtil.BoosterList
message BoosterList {
	repeated pegasus.pegasusshared.BoosterInfo list = 1 [packed=false];
}

// ref: PegasusUtil.BoosterModifications
message BoosterModifications {
	repeated pegasus.pegasusshared.BoosterInfo modifications = 1 [packed=false];
}

// ref: PegasusUtil.Boosters
message Boosters {
	repeated pegasus.pegasusshared.BoosterInfo list = 1 [packed=false];
}

// ref: PegasusUtil.BoughtSoldCard
message BoughtSoldCard {
	// ref: PegasusUtil.BoughtSoldCard/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 258;
	}

	// ref: PegasusUtil.BoughtSoldCard/Result
	enum Result {
		RESULT_AUTO_INVALID = 0;
		GENERIC_FAILURE = 1;
		SOLD = 2;
		BOUGHT = 3;
		SOULBOUND = 4;
		WRONG_SELL_PRICE = 5;
		WRONG_BUY_PRICE = 6;
		NO_PERMISSION = 7;
		EVENT_NOT_ACTIVE = 8;
		COUNT_MISMATCH = 9;
	}

	pegasus.pegasusshared.CardDef def = 1;
	int32 amount = 2;
	Result result = 3;
	int32 count = 4;
	bool nerfed = 5;
	int32 unit_sell_price = 6;
	int32 unit_buy_price = 7;
	int32 current_collection_count = 8;
	int64 collection_version = 9;
}

// ref: PegasusUtil.Bundle
message Bundle {
	string id = 1;
	double deprecated_cost = 2;
	string apple_id = 3;
	string google_play_id = 4;
	repeated BundleItem items = 5 [packed=false];
	int64 gold_cost = 6;
	string amazon_id = 7;
	string product_event_name = 9;
	repeated pegasus.pegasusshared.BattlePayProvider exclusive_providers = 10 [packed=false];
	string real_money_product_event_name = 11;
	uint64 cost = 12;
	bool is_pre_purchase = 13;
	int64 pmt_product_id = 14;
}

// ref: PegasusUtil.BundleItem
message BundleItem {
	ProductType product_type = 1;
	int32 data = 2;
	int32 quantity = 3;
	int32 base_quantity = 4;
}

// ref: PegasusUtil.BuySellCard
message BuySellCard {
	// ref: PegasusUtil.BuySellCard/PacketID
	enum PacketID {
		system = 0;
		ID = 257;
	}

	pegasus.pegasusshared.CardDef def = 1;
	int32 count = 2;
	bool buying = 3;
	int32 unit_sell_price = 4;
	int32 unit_buy_price = 5;
	int32 current_collection_count = 6;
}

// ref: PegasusUtil.CancelPurchase
message CancelPurchase {
	// ref: PegasusUtil.CancelPurchase/CancelReason
	enum CancelReason {
		CANCELREASON_AUTO_INVALID = 0;
		PROVIDER_REPORTED_FAILURE = 1;
		NOT_RECOGNIZED_BY_PROVIDER = 2;
		USER_CANCELED_BEFORE_PAYMENT = 3;
		USER_CANCELING_TO_UNBLOCK = 4;
		CHALLENGE_TIMEOUT = 5;
		CHALLENGE_DENIED = 6;
		CHALLENGE_OTHER_ERROR = 7;
	}

	// ref: PegasusUtil.CancelPurchase/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 274;
	}

	bool is_auto_cancel = 1;
	CancelReason reason = 2;
	string device_id = 3;
	string error_message = 4;
}

// ref: PegasusUtil.CancelPurchaseResponse
message CancelPurchaseResponse {
	// ref: PegasusUtil.CancelPurchaseResponse/CancelResult
	enum CancelResult {
		CANCELRESULT_AUTO_INVALID = 0;
		CR_SUCCESS = 1;
		CR_NOT_ALLOWED = 2;
		CR_NOTHING_TO_CANCEL = 3;
	}

	// ref: PegasusUtil.CancelPurchaseResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 275;
	}

	CancelResult result = 1;
	int64 transaction_id = 2;
	string product_id = 3;
	int32 currency_deprecated = 4;
	string currency_code = 5;
}

// ref: PegasusUtil.CancelQuest
message CancelQuest {
	// ref: PegasusUtil.CancelQuest/PacketID
	enum PacketID {
		system = 0;
		ID = 281;
	}

	int32 quest_id = 1;
}

// ref: PegasusUtil.CancelQuestResponse
message CancelQuestResponse {
	// ref: PegasusUtil.CancelQuestResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 282;
	}

	int32 quest_id = 1;
	bool success = 2;
	pegasus.pegasusshared.Date next_quest_cancel = 3;
}

// ref: PegasusUtil.CardBackModification
message CardBackModification {
	int32 asset_card_back_id = 1;
}

// ref: PegasusUtil.CardBackModifications
message CardBackModifications {
	repeated CardBackModification card_back_modifications = 1 [packed=false];
}

// ref: PegasusUtil.CardBacks
message CardBacks {
	// ref: PegasusUtil.CardBacks/PacketID
	enum PacketID {
		system = 0;
		ID = 236;
	}

	int32 default_card_back = 1;
	repeated int32 card_backs = 2 [packed=false];
}

// ref: PegasusUtil.CardModification
message CardModification {
	int32 asset_card_id = 1;
	int32 premium = 2;
	int32 quantity = 3;
	int32 amount_seen = 4;
}

// ref: PegasusUtil.CardUseCount
message CardUseCount {
	int32 asset = 1;
	int32 count = 2;
}

// ref: PegasusUtil.CardValue
message CardValue {
	pegasus.pegasusshared.CardDef card = 1;
	int32 buy = 2;
	int32 sell = 3;
	bool nerfed = 4;
}

// ref: PegasusUtil.CardValues
message CardValues {
	// ref: PegasusUtil.CardValues/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 260;
	}

	repeated CardValue cards = 1 [packed=false];
	int32 card_nerf_index = 2;
}

// ref: PegasusUtil.CheckAccountLicenseAchieve
message CheckAccountLicenseAchieve {
	// ref: PegasusUtil.CheckAccountLicenseAchieve/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 297;
	}

	int32 achieve = 1;
}

// ref: PegasusUtil.ClientOption
message ClientOption {
	int32 index = 1;
	bool as_bool = 2;
	int32 as_int32 = 3;
	int64 as_int64 = 4;
	float as_float = 5;
	uint64 as_uint64 = 6;
}

// ref: PegasusUtil.ClientOptions
message ClientOptions {
	repeated ClientOption options = 1 [packed=false];
	bool failed = 2;
}

// ref: PegasusUtil.ClientRequestResponse
message ClientRequestResponse {
	// ref: PegasusUtil.ClientRequestResponse/ClientRequestResponseFlags
	enum ClientRequestResponseFlags {
		CRRF_SERVICE_NONE = 0;
		CRRF_SERVICE_UNAVAILABLE = 1;
		CRRF_SERVICE_UNKNOWN_ERROR = 2;
	}

	// ref: PegasusUtil.ClientRequestResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 328;
	}

	ClientRequestResponseFlags response_flags = 1;
}

// ref: PegasusUtil.ClientStateNotification
message ClientStateNotification {
	// ref: PegasusUtil.ClientStateNotification/PacketID
	enum PacketID {
		system = 0;
		ID = 333;
	}

	AchievementNotifications achievement_notifications = 1;
	NoticeNotifications notice_notifications = 2;
	CollectionModifications collection_modifications = 3;
	GameCurrencyStates currency_state = 4;
	BoosterModifications booster_modifications = 5;
	HeroXP hero_xp = 6;
	PlayerRecords player_records = 7;
	ArenaSessionResponse arena_session_response = 8;
	CardBackModifications card_back_modifications = 9;
}

// ref: PegasusUtil.ClientStaticAssetsResponse
message ClientStaticAssetsResponse {
	// ref: PegasusUtil.ClientStaticAssetsResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 341;
	}

	repeated pegasus.pegasusshared.AssetRecordInfo assets_to_get = 1 [packed=false];
}

// ref: PegasusUtil.Collection
message Collection {
	repeated pegasus.pegasusshared.CardStack stacks = 1 [packed=false];
	int64 collection_version = 2;
}

// ref: PegasusUtil.CollectionModifications
message CollectionModifications {
	repeated CardModification card_modifications = 1 [packed=false];
	int64 collection_version = 2;
}

// ref: PegasusUtil.CreateDeck
message CreateDeck {
	// ref: PegasusUtil.CreateDeck/PacketID
	enum PacketID {
		system = 0;
		ID = 209;
	}

	string name = 1;
	int32 hero = 2;
	int32 hero_premium = 3;
	pegasus.pegasusshared.DeckType deck_type = 4;
	bool tagged_standard = 5;
	int64 sort_order = 6;
	pegasus.pegasusshared.DeckSourceType source_type = 7;
	string pasted_deck_hash = 8;
	int32 brawl_library_item_id = 9;
	int64 fsg_id = 100;
	bytes fsg_shared_secret_key = 101;
}

// ref: PegasusUtil.DBAction
message DBAction {
	// ref: PegasusUtil.DBAction/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 216;
	}

	pegasus.pegasusshared.DatabaseAction action = 1;
	pegasus.pegasusshared.DatabaseResult result = 2;
	int64 meta_data = 3;
}

// ref: PegasusUtil.DebugCommandRequest
message DebugCommandRequest {
	// ref: PegasusUtil.DebugCommandRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 323;
	}

	string command = 1;
	repeated string args = 2 [packed=false];
}

// ref: PegasusUtil.DebugCommandResponse
message DebugCommandResponse {
	// ref: PegasusUtil.DebugCommandResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 324;
	}

	bool success = 1;
	string response = 2;
}

// ref: PegasusUtil.DeckContents
message DeckContents {
	bool success = 1;
	int64 deck_id = 2;
	repeated pegasus.pegasusshared.DeckCardData cards = 3 [packed=false];
}

// ref: PegasusUtil.DeckCreated
message DeckCreated {
	// ref: PegasusUtil.DeckCreated/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 217;
	}

	pegasus.pegasusshared.DeckInfo info = 1;
}

// ref: PegasusUtil.DeckDeleted
message DeckDeleted {
	// ref: PegasusUtil.DeckDeleted/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 218;
	}

	int64 deck = 1;
}

// ref: PegasusUtil.DeckList
message DeckList {
	// ref: PegasusUtil.DeckList/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 202;
	}

	repeated pegasus.pegasusshared.DeckInfo decks = 1 [packed=false];
}

// ref: PegasusUtil.DeckRenamed
message DeckRenamed {
	// ref: PegasusUtil.DeckRenamed/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 219;
	}

	int64 deck = 1;
	string name = 2;
}

// ref: PegasusUtil.DeckSetData
message DeckSetData {
	// ref: PegasusUtil.DeckSetData/PacketID
	enum PacketID {
		system = 0;
		ID = 222;
	}

	int64 deck = 1;
	repeated pegasus.pegasusshared.DeckCardData cards = 2 [packed=false];
	pegasus.pegasusshared.CardDef hero = 3;
	int32 card_back = 4;
	bool tagged_standard = 5;
	int64 sort_order = 6;
	string pasted_deck_hash = 7;
	pegasus.pegasusshared.CardDef ui_hero_override = 8;
	int64 fsg_id = 100;
	bytes fsg_shared_secret_key = 101;
}

// ref: PegasusUtil.DeckSetTemplateSource
message DeckSetTemplateSource {
	// ref: PegasusUtil.DeckSetTemplateSource/PacketID
	enum PacketID {
		system = 0;
		ID = 332;
	}

	int64 deck = 1;
	int32 template_id = 2;
}

// ref: PegasusUtil.DeleteDeck
message DeleteDeck {
	// ref: PegasusUtil.DeleteDeck/PacketID
	enum PacketID {
		system = 0;
		ID = 210;
	}

	int64 deck = 1;
	pegasus.pegasusshared.DeckType deck_type = 2;
}

// ref: PegasusUtil.DevBnetIdentify
message DevBnetIdentify {
	// ref: PegasusUtil.DevBnetIdentify/PacketID
	enum PacketID {
		system = 0;
		ID = 259;
	}

	string name = 1;
}

// ref: PegasusUtil.DoPurchase
message DoPurchase {
	// ref: PegasusUtil.DoPurchase/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 273;
	}

}

// ref: PegasusUtil.DraftAckRewards
message DraftAckRewards {
	// ref: PegasusUtil.DraftAckRewards/PacketID
	enum PacketID {
		system = 0;
		ID = 287;
	}

	int64 deck_id = 1;
	int32 slot = 2;
}

// ref: PegasusUtil.DraftBegin
message DraftBegin {
	// ref: PegasusUtil.DraftBegin/PacketID
	enum PacketID {
		system = 0;
		ID = 235;
	}

}

// ref: PegasusUtil.DraftBeginning
message DraftBeginning {
	// ref: PegasusUtil.DraftBeginning/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 246;
	}

	int64 deck_id = 1;
	repeated pegasus.pegasusshared.CardDef choice_list = 3 [packed=false];
	int32 deprecated_wins = 4;
	int32 max_slot = 5;
	ArenaSession current_session = 6;
	pegasus.pegasusshared.DraftSlotType slot_type = 7;
	repeated pegasus.pegasusshared.DraftSlotType unique_slot_types = 8 [packed=false];
}

// ref: PegasusUtil.DraftChoicesAndContents
message DraftChoicesAndContents {
	// ref: PegasusUtil.DraftChoicesAndContents/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 248;
	}

	int64 deck_id = 1;
	int32 slot = 2;
	repeated pegasus.pegasusshared.DeckCardData cards = 5 [packed=false];
	int32 deprecated_wins = 6;
	int32 deprecated_losses = 7;
	pegasus.pegasusshared.RewardChest chest = 8;
	repeated pegasus.pegasusshared.CardDef choice_list = 9 [packed=false];
	pegasus.pegasusshared.CardDef hero_def = 10;
	int32 max_wins = 11;
	int32 max_slot = 12;
	ArenaSession current_session = 13;
	pegasus.pegasusshared.DraftSlotType slot_type = 14;
	pegasus.pegasusshared.CardDef hero_power_def = 15;
	repeated pegasus.pegasusshared.DraftSlotType unique_slot_types = 16 [packed=false];
}

// ref: PegasusUtil.DraftChosen
message DraftChosen {
	// ref: PegasusUtil.DraftChosen/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 249;
	}

	pegasus.pegasusshared.CardDef chosen = 3;
	repeated pegasus.pegasusshared.CardDef next_choice_list = 4 [packed=false];
	pegasus.pegasusshared.DraftSlotType slot_type = 5;
}

// ref: PegasusUtil.DraftError
message DraftError {
	// ref: PegasusUtil.DraftError/ErrorCode
	enum ErrorCode {
		DE_UNKNOWN = 0;
		DE_NO_LICENSE = 1;
		DE_RETIRE_FIRST = 2;
		DE_NOT_IN_DRAFT = 3;
		DE_BAD_DECK = 4;
		DE_BAD_SLOT = 5;
		DE_BAD_INDEX = 6;
		DE_NOT_IN_DRAFT_BUT_COULD_BE = 7;
		DE_FEATURE_DISABLED = 8;
		DE_SEASON_INCREMENTED = 9;
	}

	// ref: PegasusUtil.DraftError/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 251;
	}

	ErrorCode error_code = 1;
	int32 num_tickets_owned = 2;
}

// ref: PegasusUtil.DraftGetChoicesAndContents
message DraftGetChoicesAndContents {
	// ref: PegasusUtil.DraftGetChoicesAndContents/PacketID
	enum PacketID {
		system = 0;
		ID = 244;
	}

}

// ref: PegasusUtil.DraftMakePick
message DraftMakePick {
	// ref: PegasusUtil.DraftMakePick/PacketID
	enum PacketID {
		system = 0;
		ID = 245;
	}

	int64 deck_id = 1;
	int32 slot = 2;
	int32 index = 3;
	int32 premium = 4;
}

// ref: PegasusUtil.DraftRemoveGoldensResponse
message DraftRemoveGoldensResponse {
	// ref: PegasusUtil.DraftRemoveGoldensResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 355;
	}

	repeated pegasus.pegasusshared.DeckCardData cards = 1 [packed=false];
	repeated pegasus.pegasusshared.CardDef choice_list = 2 [packed=false];
}

// ref: PegasusUtil.DraftRequestRemoveGoldens
message DraftRequestRemoveGoldens {
	// ref: PegasusUtil.DraftRequestRemoveGoldens/PacketID
	enum PacketID {
		system = 0;
		ID = 354;
	}

}

// ref: PegasusUtil.DraftRetire
message DraftRetire {
	// ref: PegasusUtil.DraftRetire/PacketID
	enum PacketID {
		system = 0;
		ID = 242;
	}

	int64 deck_id = 1;
	int32 slot = 2;
	int32 season_id = 3;
}

// ref: PegasusUtil.DraftRetired
message DraftRetired {
	// ref: PegasusUtil.DraftRetired/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 247;
	}

	int64 deck_id = 1;
	pegasus.pegasusshared.RewardChest chest = 2;
}

// ref: PegasusUtil.DraftRewardsAcked
message DraftRewardsAcked {
	// ref: PegasusUtil.DraftRewardsAcked/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 288;
	}

	int64 deck_id = 1;
}

// ref: PegasusUtil.FavoriteHeroesResponse
message FavoriteHeroesResponse {
	// ref: PegasusUtil.FavoriteHeroesResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 318;
	}

	repeated pegasus.pegasusshared.FavoriteHero favorite_heroes = 1 [packed=false];
}

// ref: PegasusUtil.GameCurrencyStates
message GameCurrencyStates {
	int64 arcane_dust_balance = 1;
	int64 capped_gold_balance = 2;
	int64 bonus_gold_balance = 3;
	int64 gold_cap = 4;
	int64 gold_cap_warning = 5;
	int64 currency_version = 6;
}

// ref: PegasusUtil.GameSaveDataRequest
message GameSaveDataRequest {
	// ref: PegasusUtil.GameSaveDataRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 357;
	}

	repeated int64 key_ids = 1 [packed=false];
	int32 client_token = 2;
}

// ref: PegasusUtil.GameSaveDataResponse
message GameSaveDataResponse {
	// ref: PegasusUtil.GameSaveDataResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 358;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
	repeated pegasus.pegasusshared.GameSaveDataUpdate data = 2 [packed=false];
	int32 client_token = 3;
}

// ref: PegasusUtil.GamesInfo
message GamesInfo {
	// ref: PegasusUtil.GamesInfo/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 208;
	}

	int32 games_started = 1;
	int32 games_won = 2;
	int32 games_lost = 3;
	int32 free_reward_progress = 4;
}

// ref: PegasusUtil.GameToConnectNotification
message GameToConnectNotification {
	// ref: PegasusUtil.GameToConnectNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 363;
	}

	pegasus.pegasusshared.GameConnectionInfo info = 1;
}

// ref: PegasusUtil.GenericData
message GenericData {
	uint32 type_id = 1;
	bytes data = 2;
}

// ref: PegasusUtil.GenericRequest
message GenericRequest {
	int32 request_id = 1;
	GenericData generic_data = 2;
	int32 request_sub_id = 3;
}

// ref: PegasusUtil.GenericRequestList
message GenericRequestList {
	// ref: PegasusUtil.GenericRequestList/PacketID
	enum PacketID {
		system = 0;
		ID = 327;
	}

	repeated GenericRequest requests = 1 [packed=false];
}

// ref: PegasusUtil.GenericResponse
message GenericResponse {
	// ref: PegasusUtil.GenericResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 326;
	}

	// ref: PegasusUtil.GenericResponse/Result
	enum Result {
		RESULT_OK = 0;
		RESULT_REQUEST_IN_PROCESS = 1;
		RESULT_REQUEST_COMPLETE = 2;
		RESULT_UNKNOWN_ERROR = 100;
		RESULT_INTERNAL_ERROR = 101;
		RESULT_DB_ERROR = 102;
		RESULT_INVALID_REQUEST = 103;
		RESULT_LOGIN_LOAD = 104;
		RESULT_DATA_MIGRATION_OR_PLAYER_ID_ERROR = 105;
		RESULT_INTERNAL_RPC_ERROR = 106;
	}

	Result result_code = 1;
	int32 request_id = 2;
	int32 request_sub_id = 3;
	GenericData generic_data = 4;
}

// ref: PegasusUtil.GetAccountInfo
message GetAccountInfo {
	// ref: PegasusUtil.GetAccountInfo/PacketID
	enum PacketID {
		system = 0;
		ID = 201;
	}

	// ref: PegasusUtil.GetAccountInfo/Request
	enum Request {
		REQUEST_AUTO_INVALID = 0;
		LAST_LOGIN = 1;
		DECK_LIST = 2;
		COLLECTION = 3;
		MEDAL_INFO = 4;
		MEDAL_HISTORY = 5;
		BOOSTERS = 6;
		CARD_BACKS = 7;
		PLAYER_RECORD = 8;
		GAMES_PLAYED = 9;
		DECK_LIMIT = 10;
		CAMPAIGN_INFO = 11;
		NOTICES = 12;
		MOTD = 13;
		CLIENT_OPTIONS = 14;
		CARD_VALUES = 15;
		DISCONNECTED = 16;
		ARCANE_DUST_BALANCE = 17;
		FEATURES = 18;
		REWARD_PROGRESS = 19;
		GOLD_BALANCE = 20;
		HERO_XP = 21;
		PVP_QUEUE = 22;
		NOT_SO_MASSIVE_LOGIN = 23;
		BOOSTER_TALLY = 24;
		TAVERN_BRAWL_INFO = 25;
		TAVERN_BRAWL_RECORD = 26;
		FAVORITE_HEROES = 27;
		ACCOUNT_LICENSES = 28;
	}

	Request request = 1;
}

// ref: PegasusUtil.GetAdventureProgress
message GetAdventureProgress {
	// ref: PegasusUtil.GetAdventureProgress/PacketID
	enum PacketID {
		system = 0;
		ID = 305;
	}

}

// ref: PegasusUtil.GetAssetRequest
message GetAssetRequest {
	// ref: PegasusUtil.GetAssetRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 321;
	}

	repeated pegasus.pegasusshared.AssetKey requests = 1 [packed=false];
	int32 client_token = 2;
	int64 fsg_id = 100;
	bytes fsg_shared_secret_key = 101;
}

// ref: PegasusUtil.GetAssetResponse
message GetAssetResponse {
	// ref: PegasusUtil.GetAssetResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 322;
	}

	repeated AssetResponse responses = 1 [packed=false];
	int32 client_token = 3;
}

// ref: PegasusUtil.GetAssetsVersion
message GetAssetsVersion {
	// ref: PegasusUtil.GetAssetsVersion/PacketID
	enum PacketID {
		system = 0;
		ID = 303;
	}

	pegasus.pegasusshared.Platform platform = 1;
}

// ref: PegasusUtil.GetClientStaticAssets
message GetClientStaticAssets {
	// ref: PegasusUtil.GetClientStaticAssets/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 340;
	}

}

// ref: PegasusUtil.GetDeckContents
message GetDeckContents {
	// ref: PegasusUtil.GetDeckContents/PacketID
	enum PacketID {
		system = 0;
		ID = 214;
	}

	repeated int64 deck_id = 1 [packed=false];
}

// ref: PegasusUtil.GetDeckContentsResponse
message GetDeckContentsResponse {
	// ref: PegasusUtil.GetDeckContentsResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 215;
	}

	int64 deprecated_deck_id = 1;
	repeated pegasus.pegasusshared.DeckCardData deprecated_cards = 2 [packed=false];
	repeated DeckContents decks = 3 [packed=false];
}

// ref: PegasusUtil.GetOptions
message GetOptions {
	// ref: PegasusUtil.GetOptions/PacketID
	enum PacketID {
		system = 0;
		ID = 240;
	}

}

// ref: PegasusUtil.GetPurchaseMethod
message GetPurchaseMethod {
	// ref: PegasusUtil.GetPurchaseMethod/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 250;
	}

	string product_id = 1;
	int32 quantity = 2;
	int32 currency_deprecated = 3;
	string device_id = 4;
	pegasus.pegasusshared.Platform platform = 5;
	string currency_code = 6;
}

// ref: PegasusUtil.GetRecruitAFriendData
message GetRecruitAFriendData {
	// ref: PegasusUtil.GetRecruitAFriendData/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 2;
		ID = 337;
	}

}

// ref: PegasusUtil.GetRecruitAFriendURL
message GetRecruitAFriendURL {
	// ref: PegasusUtil.GetRecruitAFriendURL/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 2;
		ID = 335;
	}

	pegasus.pegasusshared.Platform platform = 1;
}

// ref: PegasusUtil.GetServerTimeRequest
message GetServerTimeRequest {
	// ref: PegasusUtil.GetServerTimeRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 364;
	}

	int64 client_unix_time = 1;
}

// ref: PegasusUtil.GetServerTimeResponse
message GetServerTimeResponse {
	// ref: PegasusUtil.GetServerTimeResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 365;
	}

	int64 server_unix_time = 1;
}

// ref: PegasusUtil.GetThirdPartyPurchaseStatus
message GetThirdPartyPurchaseStatus {
	// ref: PegasusUtil.GetThirdPartyPurchaseStatus/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 294;
	}

	string third_party_id = 1;
}

// ref: PegasusUtil.GoldCostBooster
message GoldCostBooster {
	int64 cost = 1;
	int32 pack_type = 2;
	string buy_with_gold_event_name = 3;
}

// ref: PegasusUtil.GuardianVars
message GuardianVars {
	// ref: PegasusUtil.GuardianVars/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 264;
	}

	bool tourney = 1;
	bool practice = 2;
	bool casual = 3;
	bool forge = 4;
	bool friendly = 5;
	bool manager = 6;
	bool crafting = 7;
	bool hunter = 8;
	bool mage = 9;
	bool paladin = 10;
	bool priest = 11;
	bool rogue = 12;
	bool shaman = 13;
	bool warlock = 14;
	bool warrior = 15;
	int32 show_user_ui = 16;
	bool store = 17;
	bool battle_pay = 18;
	bool buy_with_gold = 19;
	bool tavern_brawl = 20;
	int32 client_options_update_interval_seconds = 21;
	bool cais_enabled_non_mobile = 22;
	bool cais_enabled_mobile_china = 23;
	bool cais_enabled_mobile_south_korea = 24;
	bool send_telemetry_presence = 25;
	int32 friend_week_conceder_max_defense = 26;
	int32 wins_per_gold = 27;
	int32 gold_per_reward = 28;
	int32 max_gold_per_day = 29;
	int32 xp_solo_limit = 30;
	int32 max_hero_level = 31;
	float event_timing_mod = 32;
	bool fsg_enabled = 33;
	bool fsg_auto_checkin_enabled = 34;
	int32 friend_week_conceded_game_min_total_turns = 35;
	bool friend_week_allows_tavern_brawl_record_update = 36;
	bool fsg_show_beta_label = 37;
	int32 fsg_friend_list_patron_count_limit = 38;
	uint32 arena_closed_to_new_sessions_seconds = 39;
	bool fsg_login_scan_enabled = 40;
	int32 fsg_max_presence_pubscribed_patron_count = 41;
	bool quick_pack_opening_allowed = 42;
	bool allow_ios_highres = 43;
	bool simple_checkout = 44;
}

// ref: PegasusUtil.HeroXP
message HeroXP {
	// ref: PegasusUtil.HeroXP/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 283;
	}

	repeated HeroXPInfo xp_infos = 1 [packed=false];
}

// ref: PegasusUtil.HeroXPInfo
message HeroXPInfo {
	int32 class_id = 1;
	int32 level = 2;
	int64 curr_xp = 3;
	int64 max_xp = 4;
	NextHeroLevelReward next_reward = 5;
}

// ref: PegasusUtil.InitialClientState
message InitialClientState {
	// ref: PegasusUtil.InitialClientState/PacketID
	enum PacketID {
		system = 0;
		ID = 207;
	}

	Collection collection = 1;
	ProfileNotices notices = 2;
	Achieves achievements = 3;
	GameCurrencyStates game_currency_states = 4;
	ClientOptions client_options = 5;
	GuardianVars guardian_vars = 6;
	repeated SpecialEventTiming special_event_timing = 7 [packed=false];
	repeated TavernBrawlInfo tavern_brawls_list = 8 [packed=false];
	Boosters boosters = 9;
	pegasus.pegasusshared.GameConnectionInfo disconnected_game = 10;
	ArenaSessionResponse arena_session = 11;
	int32 display_banner = 12;
	repeated pegasus.pegasusshared.DeckInfo decks = 13 [packed=false];
	MedalInfo medal_info = 14;
}

// ref: PegasusUtil.LeaguePromoteSelfRequest
message LeaguePromoteSelfRequest {
	// ref: PegasusUtil.LeaguePromoteSelfRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 367;
	}

}

// ref: PegasusUtil.LeaguePromoteSelfResponse
message LeaguePromoteSelfResponse {
	// ref: PegasusUtil.LeaguePromoteSelfResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 368;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
}

// ref: PegasusUtil.LocateCheatServerRequest
message LocateCheatServerRequest {
	// ref: PegasusUtil.LocateCheatServerRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 4;
		ID = 361;
	}

}

// ref: PegasusUtil.LocateCheatServerResponse
message LocateCheatServerResponse {
	// ref: PegasusUtil.LocateCheatServerResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 362;
	}

	string address = 1;
	int32 port = 2;
}

// ref: PegasusUtil.MassDisenchantRequest
message MassDisenchantRequest {
	// ref: PegasusUtil.MassDisenchantRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 268;
	}

}

// ref: PegasusUtil.MassDisenchantResponse
message MassDisenchantResponse {
	// ref: PegasusUtil.MassDisenchantResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 269;
	}

	int32 amount = 1;
	int64 collection_version = 2;
}

// ref: PegasusUtil.MedalInfo
message MedalInfo {
	// ref: PegasusUtil.MedalInfo/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 232;
	}

	MedalInfoData standard = 1;
	MedalInfoData wild = 2;
}

// ref: PegasusUtil.MedalInfoData
message MedalInfoData {
	int32 season_wins = 3;
	int32 stars = 6;
	int32 streak = 7;
	int32 star_level = 8;
	int32 level_start_deprecated = 9;
	int32 level_end_deprecated = 10;
	bool can_lose_level_deprecated = 11;
	int32 legend_rank = 13;
	int32 best_star_level = 14;
	bool can_lose_stars_deprecated = 15;
	int32 season_games = 16;
	int32 league_id = 17;
}

// ref: PegasusUtil.NearbyPlayer
message NearbyPlayer {
	uint64 bnet_id_hi = 1;
	uint64 bnet_id_lo = 2;
	uint64 session_start_time = 3;
}

// ref: PegasusUtil.NextHeroLevelReward
message NextHeroLevelReward {
	int32 level = 1;
	pegasus.pegasusshared.ProfileNoticeRewardBooster reward_booster = 2;
	pegasus.pegasusshared.ProfileNoticeRewardCard reward_card = 3;
	pegasus.pegasusshared.ProfileNoticeRewardDust reward_dust = 4;
	pegasus.pegasusshared.ProfileNoticeRewardGold reward_gold = 5;
	pegasus.pegasusshared.ProfileNoticeRewardMount reward_mount = 6;
	pegasus.pegasusshared.ProfileNoticeRewardForge reward_forge = 7;
}

// ref: PegasusUtil.NOP
message NOP {
	// ref: PegasusUtil.NOP/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 254;
	}

}

// ref: PegasusUtil.NoticeNotification
message NoticeNotification {
	ProfileNotice notice = 1;
}

// ref: PegasusUtil.NoticeNotifications
message NoticeNotifications {
	repeated NoticeNotification notice_notifications = 1 [packed=false];
}

// ref: PegasusUtil.OpenBooster
message OpenBooster {
	// ref: PegasusUtil.OpenBooster/PacketID
	enum PacketID {
		system = 0;
		ID = 225;
	}

	int32 booster_type = 2;
	int64 fsg_id = 3;
}

// ref: PegasusUtil.PlayerRecord
message PlayerRecord {
	pegasus.pegasusshared.GameType type = 1;
	int32 data = 2;
	int32 wins = 3;
	int32 losses = 4;
	int32 ties = 5;
}

// ref: PegasusUtil.PlayerRecords
message PlayerRecords {
	// ref: PegasusUtil.PlayerRecords/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 270;
	}

	repeated PlayerRecord records = 1 [packed=false];
}

// ref: PegasusUtil.ProcessRecruitAFriend
message ProcessRecruitAFriend {
	// ref: PegasusUtil.ProcessRecruitAFriend/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 2;
		ID = 339;
	}

}

// ref: PegasusUtil.ProcessRecruitAFriendResponse
message ProcessRecruitAFriendResponse {
	// ref: PegasusUtil.ProcessRecruitAFriendResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 342;
	}

	RAFServiceStatus raf_service_status = 1;
}

// ref: PegasusUtil.ProfileDeckLimit
message ProfileDeckLimit {
	// ref: PegasusUtil.ProfileDeckLimit/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 231;
	}

	int32 deck_limit = 1;
}

// ref: PegasusUtil.ProfileNotice
message ProfileNotice {
	int64 entry = 1;
	pegasus.pegasusshared.ProfileNoticeMedal medal = 2;
	pegasus.pegasusshared.ProfileNoticeRewardBooster reward_booster = 3;
	pegasus.pegasusshared.ProfileNoticeRewardCard reward_card = 4;
	pegasus.pegasusshared.ProfileNoticePreconDeck precon_deck = 6;
	pegasus.pegasusshared.ProfileNoticeRewardDust reward_dust = 7;
	pegasus.pegasusshared.ProfileNoticeRewardGold reward_gold = 8;
	pegasus.pegasusshared.ProfileNoticeRewardMount reward_mount = 9;
	pegasus.pegasusshared.ProfileNoticeRewardForge reward_forge = 10;
	int32 origin = 11;
	int64 origin_data = 12;
	pegasus.pegasusshared.Date when = 13;
	pegasus.pegasusshared.ProfileNoticePurchase purchase = 14;
	pegasus.pegasusshared.ProfileNoticeCardBack reward_card_back = 15;
	pegasus.pegasusshared.ProfileNoticeDisconnectedGameResult dc_game_result = 16;
	pegasus.pegasusshared.ProfileNoticeBonusStars bonus_stars = 17;
	pegasus.pegasusshared.ProfileNoticeAdventureProgress adventure_progress = 18;
	pegasus.pegasusshared.ProfileNoticeLevelUp level_up = 19;
	pegasus.pegasusshared.ProfileNoticeAccountLicense account_license = 20;
	pegasus.pegasusshared.ProfileNoticeTavernBrawlRewards tavern_brawl_rewards = 21;
	pegasus.pegasusshared.ProfileNoticeTavernBrawlTicket tavern_brawl_ticket = 22;
	pegasus.pegasusshared.ProfileNoticeGenericRewardChest generic_reward_chest = 23;
	pegasus.pegasusshared.ProfileNoticeLeaguePromotionRewards league_promotion_rewards = 24;
}

// ref: PegasusUtil.ProfileNotices
message ProfileNotices {
	repeated ProfileNotice list = 1 [packed=false];
}

// ref: PegasusUtil.ProfileProgress
message ProfileProgress {
	// ref: PegasusUtil.ProfileProgress/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 233;
	}

	int64 progress = 1;
	int32 best_forge = 2;
	pegasus.pegasusshared.Date last_forge = 3;
}

// ref: PegasusUtil.PurchaseError
message PurchaseError {
	// ref: PegasusUtil.PurchaseError/Error
	enum Error {
		E_SUCCESS = 0;
		E_UNKNOWN = -1;
		E_STILL_IN_PROGRESS = 1;
		E_INVALID_BNET = 2;
		E_SERVICE_NA = 3;
		E_PURCHASE_IN_PROGRESS = 4;
		E_DATABASE = 5;
		E_INVALID_QUANTITY = 6;
		E_DUPLICATE_LICENSE = 7;
		E_REQUEST_NOT_SENT = 8;
		E_NO_ACTIVE_BPAY = 9;
		E_FAILED_RISK = 10;
		E_CANCELED = 11;
		E_WAIT_MOP = 12;
		E_WAIT_CLIENT_CONFIRM = 13;
		E_WAIT_CLIENT_RISK = 14;
		E_PRODUCT_NA = 15;
		E_RISK_TIMEOUT = 16;
		E_PRODUCT_ALREADY_OWNED = 17;
		E_WAIT_THIRD_PARTY_RECEIPT = 18;
		E_PRODUCT_EVENT_HAS_ENDED = 19;
		E_BP_GENERIC_FAIL = 100;
		E_BP_INVALID_CC_EXPIRY = 101;
		E_BP_RISK_ERROR = 102;
		E_BP_NO_VALID_PAYMENT = 103;
		E_BP_PAYMENT_AUTH = 104;
		E_BP_PROVIDER_DENIED = 105;
		E_BP_PURCHASE_BAN = 106;
		E_BP_SPENDING_LIMIT = 107;
		E_BP_PARENTAL_CONTROL = 108;
		E_BP_THROTTLED = 109;
		E_BP_THIRD_PARTY_BAD_RECEIPT = 110;
		E_BP_THIRD_PARTY_RECEIPT_USED = 111;
		E_BP_PRODUCT_UNIQUENESS_VIOLATED = 112;
		E_BP_REGION_IS_DOWN = 113;
		E_BP_GENERIC_FAIL_RETRY_CONTACT_CS_IF_PERSISTS = 115;
		E_BP_CHALLENGE_ID_FAILED_VERIFICATION = 116;
	}

	Error error = 1;
	string purchase_in_progress = 2;
	string error_code = 3;
}

// ref: PegasusUtil.PurchaseMethod
message PurchaseMethod {
	// ref: PegasusUtil.PurchaseMethod/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 272;
	}

	string product_id = 1;
	int32 quantity = 2;
	int32 currency_deprecated = 3;
	string wallet_name = 4;
	bool use_ebalance = 5;
	PurchaseError error = 6;
	int64 transaction_id = 7;
	bool is_zero_cost_license = 8;
	string challenge_id = 9;
	string challenge_url = 10;
	string currency_code = 11;
}

// ref: PegasusUtil.PurchaseResponse
message PurchaseResponse {
	// ref: PegasusUtil.PurchaseResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 256;
	}

	PurchaseError error = 1;
	int64 transaction_id = 2;
	string product_id = 3;
	string third_party_id = 4;
	int32 currency_deprecated = 5;
	bool is_zero_cost_license = 6;
	string currency_code = 7;
}

// ref: PegasusUtil.PurchaseWithGold
message PurchaseWithGold {
	// ref: PegasusUtil.PurchaseWithGold/PacketID
	enum PacketID {
		system = 0;
		ID = 279;
	}

	int32 quantity = 1;
	ProductType product = 2;
	int32 data = 3;
}

// ref: PegasusUtil.PurchaseWithGoldResponse
message PurchaseWithGoldResponse {
	// ref: PegasusUtil.PurchaseWithGoldResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 280;
	}

	// ref: PegasusUtil.PurchaseWithGoldResponse/PurchaseResult
	enum PurchaseResult {
		PURCHASERESULT_AUTO_INVALID = 0;
		PR_SUCCESS = 1;
		PR_INSUFFICIENT_FUNDS = 2;
		PR_PRODUCT_NA = 3;
		PR_FEATURE_NA = 4;
		PR_INVALID_QUANTITY = 5;
		PR_PRODUCT_EVENT_HAS_ENDED = 6;
	}

	PurchaseResult result = 1;
	int64 gold_used = 2;
}

// ref: PegasusUtil.RecruitAFriendDataResponse
message RecruitAFriendDataResponse {
	// ref: PegasusUtil.RecruitAFriendDataResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 338;
	}

	uint32 total_recruit_count = 1;
	repeated RecruitData top_recruits = 2 [packed=false];
}

// ref: PegasusUtil.RecruitAFriendURLResponse
message RecruitAFriendURLResponse {
	// ref: PegasusUtil.RecruitAFriendURLResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 336;
	}

	string raf_url = 1;
	RAFServiceStatus raf_service_status = 2;
	string raf_url_full = 3;
}

// ref: PegasusUtil.RecruitData
message RecruitData {
	pegasus.pegasusshared.BnetId game_account_id = 1;
	uint32 progress = 2;
	pegasus.pegasusshared.RecruitAFriendState recruit_state = 3;
	pegasus.pegasusshared.Date graduation_date = 4;
	uint32 recruiter_reward = 5;
}

// ref: PegasusUtil.RenameDeck
message RenameDeck {
	// ref: PegasusUtil.RenameDeck/PacketID
	enum PacketID {
		system = 0;
		ID = 211;
	}

	int64 deck = 1;
	string name = 2;
}

// ref: PegasusUtil.ReportBlizzardCheckoutStatus
message ReportBlizzardCheckoutStatus {
	// ref: PegasusUtil.ReportBlizzardCheckoutStatus/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 366;
	}

	pegasus.pegasusshared.BlizzardCheckoutStatus status = 1;
	string transaction_id = 2;
	string product_id = 3;
	string legacy_product_id = 4;
	string currency = 5;
	int64 client_unix_time = 6;
}

// ref: PegasusUtil.RequestTavernBrawlInfo
message RequestTavernBrawlInfo {
	// ref: PegasusUtil.RequestTavernBrawlInfo/PacketID
	enum PacketID {
		system = 0;
		ID = 352;
	}

	pegasus.pegasusshared.BrawlType brawl_type = 2;
	int64 fsg_id = 100;
	bytes fsg_shared_secret_key = 101;
}

// ref: PegasusUtil.RequestTavernBrawlPlayerRecord
message RequestTavernBrawlPlayerRecord {
	// ref: PegasusUtil.RequestTavernBrawlPlayerRecord/PacketID
	enum PacketID {
		system = 0;
		ID = 353;
	}

	pegasus.pegasusshared.BrawlType brawl_type = 2;
	int64 fsg_id = 100;
	bytes fsg_shared_secret_key = 101;
}

// ref: PegasusUtil.ReturningPlayerInfo
message ReturningPlayerInfo {
	pegasus.pegasusshared.ReturningPlayerStatus status = 1;
	uint32 ab_test_group = 2;
	int64 notification_suppression_time_days = 3;
}

// ref: PegasusUtil.ReturningPlayerOptOutRequest
message ReturningPlayerOptOutRequest {
	// ref: PegasusUtil.ReturningPlayerOptOutRequest/PacketID
	enum PacketID {
		system = 0;
		ID = 350;
	}

}

// ref: PegasusUtil.ReturningPlayerOptOutResponse
message ReturningPlayerOptOutResponse {
	// ref: PegasusUtil.ReturningPlayerOptOutResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 356;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
}

// ref: PegasusUtil.RewardProgress
message RewardProgress {
	// ref: PegasusUtil.RewardProgress/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 271;
	}

	pegasus.pegasusshared.Date season_end = 1;
	int32 season_number = 5;
	pegasus.pegasusshared.Date next_quest_cancel = 11;
}

// ref: PegasusUtil.RpcHeader
message RpcHeader {
	uint64 type = 1;
	uint64 retry_count = 2;
	uint64 request_not_handled_count = 3;
}

// ref: PegasusUtil.RpcMessage
message RpcMessage {
	RpcHeader rpc_header = 1;
	bytes message_body = 2;
}

// ref: PegasusUtil.SetCardBack
message SetCardBack {
	// ref: PegasusUtil.SetCardBack/PacketID
	enum PacketID {
		system = 0;
		ID = 291;
	}

	int32 card_back = 1;
	int64 deck_id = 2;
}

// ref: PegasusUtil.SetCardBackResponse
message SetCardBackResponse {
	// ref: PegasusUtil.SetCardBackResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 292;
	}

	bool success = 1;
	int32 card_back = 2;
}

// ref: PegasusUtil.SetFavoriteHero
message SetFavoriteHero {
	// ref: PegasusUtil.SetFavoriteHero/PacketID
	enum PacketID {
		system = 0;
		ID = 319;
	}

	pegasus.pegasusshared.FavoriteHero favorite_hero = 1;
}

// ref: PegasusUtil.SetFavoriteHeroResponse
message SetFavoriteHeroResponse {
	// ref: PegasusUtil.SetFavoriteHeroResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 320;
	}

	bool success = 1;
	pegasus.pegasusshared.FavoriteHero favorite_hero = 2;
}

// ref: PegasusUtil.SetGameSaveData
message SetGameSaveData {
	// ref: PegasusUtil.SetGameSaveData/PacketID
	enum PacketID {
		system = 0;
		ID = 359;
	}

	repeated pegasus.pegasusshared.GameSaveDataUpdate data = 1 [packed=false];
	int32 client_token = 2;
}

// ref: PegasusUtil.SetGameSaveDataResponse
message SetGameSaveDataResponse {
	// ref: PegasusUtil.SetGameSaveDataResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 360;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
	repeated pegasus.pegasusshared.GameSaveDataUpdate data = 2 [packed=false];
	int32 client_token = 3;
}

// ref: PegasusUtil.SetOptions
message SetOptions {
	// ref: PegasusUtil.SetOptions/MaxOptionCount
	enum MaxOptionCount {
		MAXOPTIONCOUNT_AUTO_INVALID = 0;
		LIMIT = 51;
	}

	// ref: PegasusUtil.SetOptions/PacketID
	enum PacketID {
		system = 0;
		ID = 239;
	}

	repeated ClientOption options = 1 [packed=false];
}

// ref: PegasusUtil.SetProgress
message SetProgress {
	// ref: PegasusUtil.SetProgress/PacketID
	enum PacketID {
		system = 0;
		ID = 230;
	}

	int64 value = 1;
}

// ref: PegasusUtil.SetProgressResponse
message SetProgressResponse {
	// ref: PegasusUtil.SetProgressResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 296;
	}

	// ref: PegasusUtil.SetProgressResponse/Result
	enum Result {
		RESULT_AUTO_INVALID = 0;
		SUCCESS = 1;
		FAILED = 2;
		ALREADY_DONE = 3;
	}

	Result result = 1;
	int64 progress = 2;
}

// ref: PegasusUtil.SpecialEventTiming
message SpecialEventTiming {
	string event = 1;
	uint64 start = 2;
	uint64 end = 3;
}

// ref: PegasusUtil.StartThirdPartyPurchase
message StartThirdPartyPurchase {
	// ref: PegasusUtil.StartThirdPartyPurchase/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 312;
	}

	pegasus.pegasusshared.BattlePayProvider provider = 1;
	string product_id = 2;
	int32 quantity = 3;
	ThirdPartyReceiptData dangling_receipt_data = 4;
	string device_id = 5;
}

// ref: PegasusUtil.SubmitThirdPartyReceipt
message SubmitThirdPartyReceipt {
	// ref: PegasusUtil.SubmitThirdPartyReceipt/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 293;
	}

	pegasus.pegasusshared.BattlePayProvider provider = 1;
	string product_id = 2;
	int32 quantity = 3;
	int64 transaction_id = 4;
	ThirdPartyReceiptData receipt_data = 5;
	string device_id = 6;
}

// ref: PegasusUtil.Subscribe
message Subscribe {
	// ref: PegasusUtil.Subscribe/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 314;
	}

	bool first_subscribe_for_route = 1;
}

// ref: PegasusUtil.SubscribeResponse
message SubscribeResponse {
	// ref: PegasusUtil.SubscribeResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 315;
	}

	// ref: PegasusUtil.SubscribeResponse/ResponseResult
	enum ResponseResult {
		RESPONSERESULT_AUTO_INVALID = 0;
		SUCCESS = 1;
		FAILED_UNAVAILABLE = 2;
	}

	uint64 route = 1;
	uint64 keep_alive_secs = 3;
	uint64 max_resubscribe_attempts = 4;
	uint64 pending_response_timeout = 5;
	uint64 pending_subscribe_timeout = 6;
	ResponseResult result = 7;
	uint64 request_max_wait_secs = 8;
}

// ref: PegasusUtil.TavernBrawlAckSessionRewards
message TavernBrawlAckSessionRewards {
	// ref: PegasusUtil.TavernBrawlAckSessionRewards/PacketID
	enum PacketID {
		system = 0;
		ID = 345;
	}

}

// ref: PegasusUtil.TavernBrawlInfo
message TavernBrawlInfo {
	// ref: PegasusUtil.TavernBrawlInfo/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 316;
	}

	pegasus.pegasusshared.TavernBrawlSeasonSpec current_tavern_brawl = 1;
	uint64 next_start_seconds_from_now = 2;
	pegasus.pegasusshared.BrawlType brawl_type = 3;
	pegasus.pegasusshared.TavernBrawlPlayerRecord my_record = 4;
	string deprecated_store_instruction_prefab = 5;
	string deprecated_store_instruction_prefab_phone = 6;
}

// ref: PegasusUtil.TavernBrawlPlayerRecordResponse
message TavernBrawlPlayerRecordResponse {
	// ref: PegasusUtil.TavernBrawlPlayerRecordResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 317;
	}

	pegasus.pegasusshared.TavernBrawlPlayerRecord record = 6;
}

// ref: PegasusUtil.TavernBrawlRequestSessionBegin
message TavernBrawlRequestSessionBegin {
	// ref: PegasusUtil.TavernBrawlRequestSessionBegin/PacketID
	enum PacketID {
		system = 0;
		ID = 343;
	}

}

// ref: PegasusUtil.TavernBrawlRequestSessionBeginResponse
message TavernBrawlRequestSessionBeginResponse {
	// ref: PegasusUtil.TavernBrawlRequestSessionBeginResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 347;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
	pegasus.pegasusshared.TavernBrawlPlayerRecord player_record = 2;
}

// ref: PegasusUtil.TavernBrawlRequestSessionRetire
message TavernBrawlRequestSessionRetire {
	// ref: PegasusUtil.TavernBrawlRequestSessionRetire/PacketID
	enum PacketID {
		system = 0;
		ID = 344;
	}

}

// ref: PegasusUtil.TavernBrawlRequestSessionRetireResponse
message TavernBrawlRequestSessionRetireResponse {
	// ref: PegasusUtil.TavernBrawlRequestSessionRetireResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 348;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
	pegasus.pegasusshared.TavernBrawlPlayerRecord player_record = 2;
	pegasus.pegasusshared.RewardChest chest = 3;
}

// ref: PegasusUtil.TavernBrawlSessionAckRewardsResponse
message TavernBrawlSessionAckRewardsResponse {
	// ref: PegasusUtil.TavernBrawlSessionAckRewardsResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 349;
	}

	pegasus.pegasusshared.ErrorCode error_code = 1;
}

// ref: PegasusUtil.ThirdPartyPurchaseStatusResponse
message ThirdPartyPurchaseStatusResponse {
	// ref: PegasusUtil.ThirdPartyPurchaseStatusResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 295;
	}

	// ref: PegasusUtil.ThirdPartyPurchaseStatusResponse/Status
	enum Status {
		STATUS_AUTO_INVALID = 0;
		NOT_FOUND = 1;
		SUCCEEDED = 2;
		FAILED = 3;
		IN_PROGRESS = 4;
	}

	string third_party_id = 1;
	Status status = 2;
}

// ref: PegasusUtil.ThirdPartyReceiptData
message ThirdPartyReceiptData {
	string third_party_id = 1;
	string receipt = 2;
	string third_party_user_id = 3;
}

// ref: PegasusUtil.TriggerEventResponse
message TriggerEventResponse {
	// ref: PegasusUtil.TriggerEventResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 299;
	}

	int32 event_id = 1;
	bool success = 2;
}

// ref: PegasusUtil.TriggerPlayedNearbyPlayerOnSubnet
message TriggerPlayedNearbyPlayerOnSubnet {
	// ref: PegasusUtil.TriggerPlayedNearbyPlayerOnSubnet/PacketID
	enum PacketID {
		system = 0;
		ID = 298;
	}

	NearbyPlayer last_played = 1;
	NearbyPlayer other_player = 2;
}

// ref: PegasusUtil.Unsubscribe
message Unsubscribe {
	// ref: PegasusUtil.Unsubscribe/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 329;
	}

}

// ref: PegasusUtil.UpdateAccountLicenses
message UpdateAccountLicenses {
	// ref: PegasusUtil.UpdateAccountLicenses/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 1;
		ID = 276;
	}

}

// ref: PegasusUtil.UpdateAccountLicensesResponse
message UpdateAccountLicensesResponse {
	// ref: PegasusUtil.UpdateAccountLicensesResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 331;
	}

	bool fixed_license_success = 1;
	bool consumable_license_success = 2;
}

// ref: PegasusUtil.UpdateLogin
message UpdateLogin {
	// ref: PegasusUtil.UpdateLogin/PacketID
	enum PacketID {
		system = 0;
		ID = 205;
	}

	bool reply_required = 1;
	string referral = 2;
	string device_model_deprecated = 3;
}

// ref: PegasusUtil.UpdateLoginComplete
message UpdateLoginComplete {
	// ref: PegasusUtil.UpdateLoginComplete/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 307;
	}

}

// ref: PegasusUtil.ValidateAchieve
message ValidateAchieve {
	// ref: PegasusUtil.ValidateAchieve/PacketID
	enum PacketID {
		system = 0;
		ID = 284;
	}

	int32 achieve = 1;
}

// ref: PegasusUtil.ValidateAchieveResponse
message ValidateAchieveResponse {
	// ref: PegasusUtil.ValidateAchieveResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		ID = 285;
	}

	int32 achieve = 1;
	bool success = 2;
}

