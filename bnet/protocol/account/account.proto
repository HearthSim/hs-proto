syntax = "proto3";
package bnet.protocol.account;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "bnet/protocol/protocol.proto";

// ref: bnet.protocol.account.AccountBlob
message AccountBlob {
	fixed32 id = 2;
	uint32 region = 3;
	repeated string email = 4 [packed=false];
	uint64 flags = 5;
	uint64 secure_release = 6;
	uint64 whitelist_start = 7;
	uint64 whitelist_end = 8;
	string full_name = 10;
	repeated AccountLicense licenses = 20 [packed=false];
	repeated AccountCredential credentials = 21 [packed=false];
	repeated GameAccountLink account_links = 22 [packed=false];
	string battle_tag = 23;
	fixed32 default_currency = 25;
	uint32 legal_region = 26;
	fixed32 legal_locale = 27;
	uint64 cache_expiration = 30;
	ParentalControlInfo parental_control_info = 31;
	string country = 32;
	uint32 preferred_region = 33;
}

// ref: bnet.protocol.account.AccountBlobList
message AccountBlobList {
	repeated AccountBlob blob = 1 [packed=false];
}

// ref: bnet.protocol.account.AccountCredential
message AccountCredential {
	uint32 id = 1;
	bytes data = 2;
}

// ref: bnet.protocol.account.AccountFieldOptions
message AccountFieldOptions {
	bool all_fields = 1;
	bool field_account_level_info = 2;
	bool field_privacy_info = 3;
	bool field_parental_control_info = 4;
	bool field_game_level_info = 6;
	bool field_game_status = 7;
	bool field_game_accounts = 8;
}

// ref: bnet.protocol.account.AccountFieldTags
message AccountFieldTags {
	fixed32 account_level_info_tag = 2;
	fixed32 privacy_info_tag = 3;
	fixed32 parental_control_info_tag = 4;
	repeated ProgramTag game_level_info_tags = 7 [packed=false];
	repeated ProgramTag game_status_tags = 9 [packed=false];
	repeated RegionTag game_account_tags = 11 [packed=false];
}

// ref: bnet.protocol.account.AccountId
message AccountId {
	fixed32 id = 1;
}

// ref: bnet.protocol.account.AccountLevelInfo
message AccountLevelInfo {
	repeated AccountLicense licenses = 3 [packed=false];
	fixed32 default_currency = 4;
	string country = 5;
	uint32 preferred_region = 6;
	bool headless_account = 14;
}

// ref: bnet.protocol.account.AccountLicense
message AccountLicense {
	uint32 id = 1;
	uint64 expires = 2;
}

// ref: bnet.protocol.account.AccountReference
message AccountReference {
	fixed32 id = 1;
	string email = 2;
	GameAccountHandle handle = 3;
	string battle_tag = 4;
	uint32 region = 10;
}

// ref: bnet.protocol.account.AccountServiceConfig
message AccountServiceConfig {
	repeated AccountServiceRegion region = 1 [packed=false];
}

// ref: bnet.protocol.account.AccountServiceRegion
message AccountServiceRegion {
	uint32 id = 1;
	string shard = 2;
}

// ref: bnet.protocol.account.AccountState
message AccountState {
	AccountLevelInfo account_level_info = 1;
	PrivacyInfo privacy_info = 2;
	ParentalControlInfo parental_control_info = 3;
	repeated GameLevelInfo game_level_info = 5 [packed=false];
	repeated GameStatus game_status = 6 [packed=false];
	repeated GameAccountList game_accounts = 7 [packed=false];
}

// ref: bnet.protocol.account.AccountStateNotification
message AccountStateNotification {
	AccountState state = 1;
	uint64 subscriber_id = 2;
	AccountFieldTags account_tags = 3;
	bool subscription_completed = 4;
}

// ref: bnet.protocol.account.AccountStateTagged
message AccountStateTagged {
	AccountState account_state = 1;
	AccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.CacheExpireRequest
message CacheExpireRequest {
	repeated AccountId account = 1 [packed=false];
	repeated GameAccountHandle game_account = 2 [packed=false];
	repeated string email = 3 [packed=false];
}

// ref: bnet.protocol.account.CAIS
message CAIS {
	uint32 played_minutes = 1;
	uint32 rested_minutes = 2;
	uint64 last_heard_time = 3;
}

// ref: bnet.protocol.account.CreateGameAccountRequest
message CreateGameAccountRequest {
	AccountId account = 1;
	uint32 region = 2;
	fixed32 program = 3;
	uint32 realm_permissions = 4;
}

// ref: bnet.protocol.account.CredentialUpdateRequest
message CredentialUpdateRequest {
	AccountId account = 1;
	repeated AccountCredential old_credentials = 2 [packed=false];
	repeated AccountCredential new_credentials = 3 [packed=false];
	uint32 region = 4;
}

// ref: bnet.protocol.account.CredentialUpdateResponse
message CredentialUpdateResponse {
}

// ref: bnet.protocol.account.CurrencyRestriction
message CurrencyRestriction {
	string currency = 1;
	string authenticator_cap = 2;
	string soft_cap = 3;
}

// ref: bnet.protocol.account.FlagUpdateRequest
message FlagUpdateRequest {
	AccountId account = 1;
	uint32 region = 2;
	uint64 flag = 3;
	bool active = 4;
}

// ref: bnet.protocol.account.FlagUpdateResponse
message FlagUpdateResponse {
}

// ref: bnet.protocol.account.ForwardCacheExpireRequest
message ForwardCacheExpireRequest {
	bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GameAccountBlob
message GameAccountBlob {
	GameAccountHandle game_account = 1;
	string name = 2;
	uint32 realm_permissions = 3;
	uint32 status = 4;
	uint64 flags = 5;
	uint32 billing_flags = 6;
	uint64 cache_expiration = 7;
	uint64 subscription_expiration = 10;
	uint32 units_remaining = 11;
	uint64 status_expiration = 12;
	uint32 box_level = 13;
	uint64 box_level_expiration = 14;
	repeated AccountLicense licenses = 20 [packed=false];
}

// ref: bnet.protocol.account.GameAccountBlobList
message GameAccountBlobList {
	repeated GameAccountBlob blob = 1 [packed=false];
}

// ref: bnet.protocol.account.GameAccountFieldOptions
message GameAccountFieldOptions {
	bool all_fields = 1;
	bool field_game_level_info = 2;
	bool field_game_time_info = 3;
	bool field_game_status = 4;
}

// ref: bnet.protocol.account.GameAccountFieldTags
message GameAccountFieldTags {
	fixed32 game_level_info_tag = 2;
	fixed32 game_time_info_tag = 3;
	fixed32 game_status_tag = 4;
}

// ref: bnet.protocol.account.GameAccountHandle
message GameAccountHandle {
	fixed32 id = 1;
	fixed32 program = 2;
	uint32 region = 3;
}

// ref: bnet.protocol.account.GameAccountLink
message GameAccountLink {
	GameAccountHandle game_account = 1;
	string name = 2;
}

// ref: bnet.protocol.account.GameAccountList
message GameAccountList {
	uint32 region = 3;
	repeated GameAccountHandle handle = 4 [packed=false];
}

// ref: bnet.protocol.account.GameAccountNotification
message GameAccountNotification {
	repeated GameAccountList region_delta = 1 [packed=false];
	uint64 subscriber_id = 2;
	AccountFieldTags account_tags = 3;
}

// ref: bnet.protocol.account.GameAccountSessionNotification
message GameAccountSessionNotification {
	GameAccountHandle game_account = 1;
	GameSessionUpdateInfo session_info = 2;
}

// ref: bnet.protocol.account.GameAccountState
message GameAccountState {
	GameLevelInfo game_level_info = 1;
	GameTimeInfo game_time_info = 2;
	GameStatus game_status = 3;
}

// ref: bnet.protocol.account.GameAccountStateNotification
message GameAccountStateNotification {
	GameAccountState state = 1;
	uint64 subscriber_id = 2;
	GameAccountFieldTags game_account_tags = 3;
	bool subscription_completed = 4;
}

// ref: bnet.protocol.account.GameAccountStateTagged
message GameAccountStateTagged {
	GameAccountState game_account_state = 1;
	GameAccountFieldTags game_account_tags = 2;
}

// ref: bnet.protocol.account.GameLevelInfo
message GameLevelInfo {
	bool is_starter_edition = 3;
	bool is_trial = 4;
	bool is_lifetime = 5;
	bool is_restricted = 6;
	bool is_beta = 7;
	string name = 8;
	fixed32 program = 9;
	repeated AccountLicense licenses = 10 [packed=false];
	uint32 realm_permissions = 11;
}

// ref: bnet.protocol.account.GameSessionInfo
message GameSessionInfo {
	uint32 start_time = 3;
	GameSessionLocation location = 4;
	bool has_benefactor = 5;
	bool is_using_igr = 6;
	bool parental_controls_active = 7;
}

// ref: bnet.protocol.account.GameSessionLocation
message GameSessionLocation {
	string ip_address = 1;
	uint32 country = 2;
	string city = 3;
}

// ref: bnet.protocol.account.GameSessionUpdateInfo
message GameSessionUpdateInfo {
	CAIS cais = 8;
}

// ref: bnet.protocol.account.GameStatus
message GameStatus {
	bool is_suspended = 4;
	bool is_banned = 5;
	uint64 suspension_expires = 6;
	fixed32 program = 7;
}

// ref: bnet.protocol.account.GameTimeInfo
message GameTimeInfo {
	bool is_unlimited_play_time = 3;
	uint64 play_time_expires = 5;
	bool is_subscription = 6;
	bool is_recurring_subscription = 7;
}

// ref: bnet.protocol.account.GameTimeRemainingInfo
message GameTimeRemainingInfo {
	uint32 minutes_remaining = 1;
	uint32 parental_daily_minutes_remaining = 2;
	uint32 parental_weekly_minutes_remaining = 3;
}

// ref: bnet.protocol.account.GetAccountRequest
message GetAccountRequest {
	AccountReference ref = 1;
	bool fetch_all = 10;
	bool fetch_blob = 11;
	bool fetch_id = 12;
	bool fetch_email = 13;
	bool fetch_battle_tag = 14;
	bool fetch_full_name = 15;
	bool fetch_links = 16;
	bool fetch_parental_controls = 17;
}

// ref: bnet.protocol.account.GetAccountResponse
message GetAccountResponse {
	AccountBlob blob = 11;
	AccountId id = 12;
	repeated string email = 13 [packed=false];
	string battle_tag = 14;
	string full_name = 15;
	repeated GameAccountLink links = 16 [packed=false];
	ParentalControlInfo parental_control_info = 17;
}

// ref: bnet.protocol.account.GetAccountStateRequest
message GetAccountStateRequest {
	bnet.protocol.EntityId entity_id = 1;
	uint32 program = 2;
	uint32 region = 3;
	AccountFieldOptions options = 10;
	AccountFieldTags tags = 11;
}

// ref: bnet.protocol.account.GetAccountStateResponse
message GetAccountStateResponse {
	AccountState state = 1;
	AccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.GetCAISInfoRequest
message GetCAISInfoRequest {
	bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GetCAISInfoResponse
message GetCAISInfoResponse {
	CAIS cais_info = 1;
}

// ref: bnet.protocol.account.GetEBalanceRequest
message GetEBalanceRequest {
	AccountId account_id = 1;
	string currency = 2;
	uint32 currency_home_region = 3;
}

// ref: bnet.protocol.account.GetEBalanceResponse
message GetEBalanceResponse {
	string balance = 1;
}

// ref: bnet.protocol.account.GetEBalanceRestrictionsRequest
message GetEBalanceRestrictionsRequest {
	uint32 currency_home_region = 1;
}

// ref: bnet.protocol.account.GetEBalanceRestrictionsResponse
message GetEBalanceRestrictionsResponse {
	repeated CurrencyRestriction currency_restrictions = 1 [packed=false];
}

// ref: bnet.protocol.account.GetGameAccountStateRequest
message GetGameAccountStateRequest {
	bnet.protocol.EntityId account_id = 1;
	bnet.protocol.EntityId game_account_id = 2;
	GameAccountFieldOptions options = 10;
	GameAccountFieldTags tags = 11;
}

// ref: bnet.protocol.account.GetGameAccountStateResponse
message GetGameAccountStateResponse {
	GameAccountState state = 1;
	GameAccountFieldTags tags = 2;
}

// ref: bnet.protocol.account.GetGameSessionInfoRequest
message GetGameSessionInfoRequest {
	bnet.protocol.EntityId entity_id = 1;
}

// ref: bnet.protocol.account.GetGameSessionInfoResponse
message GetGameSessionInfoResponse {
	GameSessionInfo session_info = 2;
}

// ref: bnet.protocol.account.GetGameTimeRemainingInfoRequest
message GetGameTimeRemainingInfoRequest {
	bnet.protocol.EntityId game_account_id = 1;
	bnet.protocol.EntityId account_id = 2;
}

// ref: bnet.protocol.account.GetGameTimeRemainingInfoResponse
message GetGameTimeRemainingInfoResponse {
	GameTimeRemainingInfo game_time_remaining_info = 1;
}

// ref: bnet.protocol.account.GetLicensesRequest
message GetLicensesRequest {
	bnet.protocol.EntityId target_id = 1;
	bool get_account_licenses = 2;
	bool get_game_account_licenses = 3;
	bool get_dynamic_account_licenses = 4;
	fixed32 program_id = 5;
	bool exclude_unknown_program = 6;
}

// ref: bnet.protocol.account.GetLicensesResponse
message GetLicensesResponse {
	repeated AccountLicense licenses = 1 [packed=false];
}

// ref: bnet.protocol.account.GetWalletListRequest
message GetWalletListRequest {
	AccountId account_id = 1;
	bool refresh = 2;
}

// ref: bnet.protocol.account.GetWalletListResponse
message GetWalletListResponse {
	repeated Wallet wallets = 1 [packed=false];
}

// ref: bnet.protocol.account.IsIgrAddressRequest
message IsIgrAddressRequest {
	string client_address = 1;
	uint32 region = 2;
}

// ref: bnet.protocol.account.ParentalControlInfo
message ParentalControlInfo {
	string timezone = 3;
	uint32 minutes_per_day = 4;
	uint32 minutes_per_week = 5;
	bool can_receive_voice = 6;
	bool can_send_voice = 7;
	repeated bool play_schedule = 8 [packed=false];
}

// ref: bnet.protocol.account.PrivacyInfo
message PrivacyInfo {
	// ref: bnet.protocol.account.PrivacyInfo/Types/GameInfoPrivacy
	enum GameInfoPrivacy {
		PRIVACY_ME = 0;
		PRIVACY_FRIENDS = 1;
		PRIVACY_EVERYONE = 2;
	}

	bool is_using_rid = 3;
	bool is_real_id_visible_for_view_friends = 4;
	bool is_hidden_from_friend_finder = 5;
	GameInfoPrivacy game_info_privacy = 6;
}

// ref: bnet.protocol.account.ProgramTag
message ProgramTag {
	fixed32 program = 1;
	fixed32 tag = 2;
}

// ref: bnet.protocol.account.RegionTag
message RegionTag {
	fixed32 region = 1;
	fixed32 tag = 2;
}

// ref: bnet.protocol.account.SubscriberReference
message SubscriberReference {
	uint64 object_id = 1;
	bnet.protocol.EntityId entity_id = 2;
	AccountFieldOptions account_options = 3;
	AccountFieldTags account_tags = 4;
	GameAccountFieldOptions game_account_options = 5;
	GameAccountFieldTags game_account_tags = 6;
}

// ref: bnet.protocol.account.SubscriptionUpdateRequest
message SubscriptionUpdateRequest {
	repeated SubscriberReference ref = 2 [packed=false];
}

// ref: bnet.protocol.account.SubscriptionUpdateResponse
message SubscriptionUpdateResponse {
	repeated SubscriberReference ref = 1 [packed=false];
}

// ref: bnet.protocol.account.Wallet
message Wallet {
	uint32 region = 1;
	uint64 wallet_id = 2;
	uint32 wallet_type = 3;
	string description = 4;
	uint32 country_id = 5;
	string state = 6;
	string city = 7;
	string postal_code = 8;
	bytes payment_info = 9;
	string bin = 10;
	string locale_id = 11;
	string street = 12;
	string first_name = 13;
	string last_name = 14;
	uint64 birth_date = 15;
}

// ref: bnet.protocol.account.Wallets
message Wallets {
	repeated Wallet wallets = 1 [packed=false];
}

