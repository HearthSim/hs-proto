syntax = "proto3";
package pegasusutil.pegasusutiltournament;

// Proto extractor compiled unit - https://github.com/HearthSim/proto-extractor

import "pegasus/pegasusshared/pegasusshared.proto";

// ref: PegasusUtilTournament.SwissDeckType
enum SwissDeckType {
	SWISS_DECK_NONE = 0;
	SWISS_DECK_CONQUEST = 1;
	SWISS_DECK_LAST_STAND = 2;
}

// ref: PegasusUtilTournament.TournamentState
enum TournamentState {
	TOURNAMENTSTATE_AUTO_INVALID = 0;
	STATE_OPEN = 1;
	STATE_LOCKED = 2;
	STATE_STARTED = 3;
	STATE_CLOSED = 4;
}

// ref: PegasusUtilTournament.TournamentType
enum TournamentType {
	TYPE_UNKNOWN = 0;
	TYPE_SWISS = 1;
}

// ref: PegasusUtilTournament.CancelTournamentRequest
message CancelTournamentRequest {
	// ref: PegasusUtilTournament.CancelTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 624;
	}

	uint64 tournament_id = 1;
	string closing_message = 2;
}

// ref: PegasusUtilTournament.CancelTournamentResponse
message CancelTournamentResponse {
	// ref: PegasusUtilTournament.CancelTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 625;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
}

// ref: PegasusUtilTournament.CreateTournamentRequest
message CreateTournamentRequest {
	// ref: PegasusUtilTournament.CreateTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 603;
	}

	string name = 1;
	pegasus.pegasusshared.FormatType format = 2;
	TournamentType type = 3;
	int32 start_unix_time = 4;
	uint32 max_participants = 5;
	bool enroll_organizer = 6;
	uint64 old_tournament_id = 7;
	SwissOption swiss = 100;
}

// ref: PegasusUtilTournament.CreateTournamentResponse
message CreateTournamentResponse {
	// ref: PegasusUtilTournament.CreateTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 604;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	uint64 tournament_id = 2;
}

// ref: PegasusUtilTournament.DeclineTournamentInviteNotification
message DeclineTournamentInviteNotification {
	// ref: PegasusUtilTournament.DeclineTournamentInviteNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 630;
	}

	uint64 tournament_id = 1;
	pegasus.pegasusshared.BnetId participant = 2;
}

// ref: PegasusUtilTournament.DeclineTournamentInviteRequest
message DeclineTournamentInviteRequest {
	// ref: PegasusUtilTournament.DeclineTournamentInviteRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 627;
	}

	uint64 tournament_id = 1;
}

// ref: PegasusUtilTournament.DeleteTournamentRequest
message DeleteTournamentRequest {
	// ref: PegasusUtilTournament.DeleteTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 620;
	}

	uint64 tournament_id = 1;
}

// ref: PegasusUtilTournament.DeleteTournamentResponse
message DeleteTournamentResponse {
	// ref: PegasusUtilTournament.DeleteTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 621;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
}

// ref: PegasusUtilTournament.GetMyTournamentsRequest
message GetMyTournamentsRequest {
	// ref: PegasusUtilTournament.GetMyTournamentsRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 614;
	}

}

// ref: PegasusUtilTournament.GetMyTournamentsResponse
message GetMyTournamentsResponse {
	// ref: PegasusUtilTournament.GetMyTournamentsResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 615;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	repeated TournamentBrief tournament_invites = 2 [packed=false];
	repeated TournamentBrief tournaments = 3 [packed=false];
}

// ref: PegasusUtilTournament.GetTournamentCodeRequest
message GetTournamentCodeRequest {
	// ref: PegasusUtilTournament.GetTournamentCodeRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 608;
	}

	uint64 tournament_id = 1;
	bool reset = 2;
}

// ref: PegasusUtilTournament.GetTournamentCodeResponse
message GetTournamentCodeResponse {
	// ref: PegasusUtilTournament.GetTournamentCodeResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 609;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	string tournament_code = 2;
}

// ref: PegasusUtilTournament.GetTournamentConfigurationRequest
message GetTournamentConfigurationRequest {
	// ref: PegasusUtilTournament.GetTournamentConfigurationRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 601;
	}

}

// ref: PegasusUtilTournament.GetTournamentConfigurationResponse
message GetTournamentConfigurationResponse {
	// ref: PegasusUtilTournament.GetTournamentConfigurationResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 602;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	repeated TournamentOption options = 2 [packed=false];
}

// ref: PegasusUtilTournament.GetTournamentDetailRequest
message GetTournamentDetailRequest {
	// ref: PegasusUtilTournament.GetTournamentDetailRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 616;
	}

	uint64 tournament_id = 1;
	string tournament_code = 2;
}

// ref: PegasusUtilTournament.GetTournamentDetailResponse
message GetTournamentDetailResponse {
	// ref: PegasusUtilTournament.GetTournamentDetailResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 617;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	TournamentDetail detail = 2;
}

// ref: PegasusUtilTournament.GetTournamentParticipantDetailRequest
message GetTournamentParticipantDetailRequest {
	// ref: PegasusUtilTournament.GetTournamentParticipantDetailRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 618;
	}

	uint64 tournament_id = 1;
	pegasus.pegasusshared.BnetId participant = 2;
}

// ref: PegasusUtilTournament.GetTournamentParticipantDetailResponse
message GetTournamentParticipantDetailResponse {
	// ref: PegasusUtilTournament.GetTournamentParticipantDetailResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 619;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	TournamentParticipantDetail detail = 2;
}

// ref: PegasusUtilTournament.InvitedToTournamentNotification
message InvitedToTournamentNotification {
	// ref: PegasusUtilTournament.InvitedToTournamentNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 607;
	}

	uint64 tournament_id = 1;
	string name = 2;
	pegasus.pegasusshared.BnetId organizer = 3;
	int32 start_unix_time = 4;
}

// ref: PegasusUtilTournament.InvitePlayersToTournamentRequest
message InvitePlayersToTournamentRequest {
	// ref: PegasusUtilTournament.InvitePlayersToTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 605;
	}

	uint64 tournament_id = 1;
	repeated pegasus.pegasusshared.BnetId game_account_id = 2 [packed=false];
}

// ref: PegasusUtilTournament.InvitePlayersToTournamentResponse
message InvitePlayersToTournamentResponse {
	// ref: PegasusUtilTournament.InvitePlayersToTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 606;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	repeated ResponsePerAccount error_details = 2 [packed=false];
}

// ref: PegasusUtilTournament.JoinTournamentNotification
message JoinTournamentNotification {
	// ref: PegasusUtilTournament.JoinTournamentNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 629;
	}

	uint64 tournament_id = 1;
	pegasus.pegasusshared.BnetId participant = 2;
}

// ref: PegasusUtilTournament.JoinTournamentRequest
message JoinTournamentRequest {
	// ref: PegasusUtilTournament.JoinTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 610;
	}

	uint64 tournament_id = 1;
	string tournament_code = 2;
}

// ref: PegasusUtilTournament.JoinTournamentResponse
message JoinTournamentResponse {
	// ref: PegasusUtilTournament.JoinTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 611;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	uint64 tournament_id = 2;
}

// ref: PegasusUtilTournament.ReadyForNextTournamentRound
message ReadyForNextTournamentRound {
	// ref: PegasusUtilTournament.ReadyForNextTournamentRound/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 628;
	}

	uint64 tournament_id = 1;
	bool ready = 2;
}

// ref: PegasusUtilTournament.ReadyUpdateTournamentNotification
message ReadyUpdateTournamentNotification {
	// ref: PegasusUtilTournament.ReadyUpdateTournamentNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 632;
	}

	uint64 tournament_id = 1;
	uint32 number_of_participants = 2;
	uint32 number_of_ready = 3;
}

// ref: PegasusUtilTournament.ResponsePerAccount
message ResponsePerAccount {
	pegasus.pegasusshared.BnetId game_account_id = 1;
	pegasus.pegasusshared.ErrorCode error = 2;
}

// ref: PegasusUtilTournament.RetireTournamentRequest
message RetireTournamentRequest {
	// ref: PegasusUtilTournament.RetireTournamentRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 622;
	}

	uint64 tournament_id = 1;
}

// ref: PegasusUtilTournament.RetireTournamentResponse
message RetireTournamentResponse {
	// ref: PegasusUtilTournament.RetireTournamentResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 623;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
}

// ref: PegasusUtilTournament.SetTournamentDecksRequest
message SetTournamentDecksRequest {
	// ref: PegasusUtilTournament.SetTournamentDecksRequest/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 612;
	}

	uint64 tournament_id = 1;
	repeated int64 deck_id = 2 [packed=false];
}

// ref: PegasusUtilTournament.SetTournamentDecksResponse
message SetTournamentDecksResponse {
	// ref: PegasusUtilTournament.SetTournamentDecksResponse/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 613;
	}

	pegasus.pegasusshared.ErrorCode error = 1;
	uint64 tournament_id = 2;
}

// ref: PegasusUtilTournament.SwissOption
message SwissOption {
	uint32 number_of_deck = 1;
	uint32 number_of_games = 2;
	SwissDeckType deck_rule = 3;
}

// ref: PegasusUtilTournament.SwissOptions
message SwissOptions {
	repeated SwissOption options = 1 [packed=false];
}

// ref: PegasusUtilTournament.TournamentBrief
message TournamentBrief {
	uint64 tournament_id = 1;
	string name = 2;
	pegasus.pegasusshared.BnetId organizer = 3;
	uint32 max_participants = 6;
	int32 start_unix_time = 7;
	int32 end_unix_time = 8;
	TournamentState current_state = 9;
}

// ref: PegasusUtilTournament.TournamentDeckBrief
message TournamentDeckBrief {
	int64 deck_id = 1;
}

// ref: PegasusUtilTournament.TournamentDetail
message TournamentDetail {
	uint64 tournament_id = 1;
	string name = 2;
	pegasus.pegasusshared.BnetId organizer = 3;
	int32 start_unix_time = 4;
	int32 end_unix_time = 5;
	uint32 max_participants = 6;
	pegasus.pegasusshared.FormatType format = 7;
	uint32 current_round = 8;
	TournamentState current_state = 9;
	TournamentOption option = 10;
	string closing_message = 11;
	repeated TournamentParticipantBrief participants = 12 [packed=false];
	repeated pegasus.pegasusshared.BnetId invites = 13 [packed=false];
}

// ref: PegasusUtilTournament.TournamentEndedNotification
message TournamentEndedNotification {
	// ref: PegasusUtilTournament.TournamentEndedNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 626;
	}

	uint64 tournament_id = 1;
	string closing_message = 2;
}

// ref: PegasusUtilTournament.TournamentOption
message TournamentOption {
	TournamentType type = 1;
	repeated pegasus.pegasusshared.FormatType format = 2 [packed=false];
	uint32 min_max_participants = 3;
	uint32 max_max_participants = 4;
	uint32 setup_duration_in_sec = 5;
	uint32 lock_tournament_duration_in_sec = 6;
	uint32 lock_player_duration_in_sec = 7;
	uint32 max_game_length_in_sec = 8;
	uint32 max_start_time_in_day = 9;
	uint32 retention_duration_in_day = 10;
	uint32 max_pending_invites = 11;
	SwissOptions swiss = 100;
}

// ref: PegasusUtilTournament.TournamentParticipantBrief
message TournamentParticipantBrief {
	pegasus.pegasusshared.BnetId participant = 1;
	uint32 rank = 2;
	uint32 win = 3;
	bool decks_selected = 4;
}

// ref: PegasusUtilTournament.TournamentParticipantDetail
message TournamentParticipantDetail {
	pegasus.pegasusshared.BnetId participant = 1;
	uint32 rank = 2;
	uint32 win = 3;
	uint32 loss = 4;
	uint32 draw = 5;
	repeated TournamentDeckBrief decks = 6 [packed=false];
	repeated TournamentRoundBrief rounds = 7 [packed=false];
}

// ref: PegasusUtilTournament.TournamentRoundBrief
message TournamentRoundBrief {
	uint32 round_id = 1;
	pegasus.pegasusshared.BnetId participant = 2;
	bool bye = 3;
	uint32 win = 4;
	uint32 loss = 5;
	uint32 draw = 6;
}

// ref: PegasusUtilTournament.TournamentStatusNotification
message TournamentStatusNotification {
	// ref: PegasusUtilTournament.TournamentStatusNotification/PacketID
	enum PacketID {
		PACKETID_AUTO_INVALID = 0;
		system = 5;
		ID = 631;
	}

	uint64 tournament_id = 1;
	TournamentState current_state = 2;
	int32 next_round_unix_time = 3;
	int32 next_round_in_sec = 4;
}

